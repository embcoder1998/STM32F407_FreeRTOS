
Embedded_Practise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb4  08006bb4  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006bb4  08006bb4  00008060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006bb4  08006bb4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00007bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006bbc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00006604  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006664  20006664  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017549  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b46  00000000  00000000  0001f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  00023120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001200  00000000  00000000  000248a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c7d  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007527  00000000  00000000  00037725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003ec4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000642c  00000000  00000000  0003ec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000450bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006960 	.word	0x08006960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006960 	.word	0x08006960

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003eac 	.word	0x20003eac

08000264 <callingTaskCreation>:
static xTaskHandle taskHandleThree = NULL;
static xTaskHandle taskHandleFour =  NULL;


// creating the all task
void callingTaskCreation(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af02      	add	r7, sp, #8

	BaseType_t xReturned;

	// create task one
    /* Create the task, storing the handle. */
    xReturned = xTaskCreate(
 800026a:	4b36      	ldr	r3, [pc, #216]	@ (8000344 <callingTaskCreation+0xe0>)
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2304      	movs	r3, #4
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2301      	movs	r3, #1
 8000274:	2280      	movs	r2, #128	@ 0x80
 8000276:	4934      	ldr	r1, [pc, #208]	@ (8000348 <callingTaskCreation+0xe4>)
 8000278:	4834      	ldr	r0, [pc, #208]	@ (800034c <callingTaskCreation+0xe8>)
 800027a:	f002 f903 	bl	8002484 <xTaskCreate>
 800027e:	6178      	str	r0, [r7, #20]
        vTaskDelete( xHandle );
    }
*/

    //if task is not created the through the falut that we can check as run time
    configASSERT(xReturned == pdPASS);
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d00b      	beq.n	800029e <callingTaskCreation+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800028a:	f383 8811 	msr	BASEPRI, r3
 800028e:	f3bf 8f6f 	isb	sy
 8000292:	f3bf 8f4f 	dsb	sy
 8000296:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	e7fd      	b.n	800029a <callingTaskCreation+0x36>

    // create the second task
    /* Create the task, storing the handle. */
    xReturned = xTaskCreate(
 800029e:	4b2c      	ldr	r3, [pc, #176]	@ (8000350 <callingTaskCreation+0xec>)
 80002a0:	9301      	str	r3, [sp, #4]
 80002a2:	2303      	movs	r3, #3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2302      	movs	r3, #2
 80002a8:	2280      	movs	r2, #128	@ 0x80
 80002aa:	492a      	ldr	r1, [pc, #168]	@ (8000354 <callingTaskCreation+0xf0>)
 80002ac:	482a      	ldr	r0, [pc, #168]	@ (8000358 <callingTaskCreation+0xf4>)
 80002ae:	f002 f8e9 	bl	8002484 <xTaskCreate>
 80002b2:	6178      	str	r0, [r7, #20]
                    ( void * ) TASK_TWO_PARAMETER,  /* Parameter passed into the task. */
					(configMAX_PRIORITIES - 4),     /* Priority at which the task is created. */
                    &taskHandleTwo );               /* Used to pass out the created task's handle. */

    //if task is not created the through the falut that we can check as run time
    configASSERT(xReturned == pdPASS);
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d00b      	beq.n	80002d2 <callingTaskCreation+0x6e>
	__asm volatile
 80002ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002be:	f383 8811 	msr	BASEPRI, r3
 80002c2:	f3bf 8f6f 	isb	sy
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	60fb      	str	r3, [r7, #12]
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	e7fd      	b.n	80002ce <callingTaskCreation+0x6a>

    // created the third task
    /* Create the task, storing the handle. */
    xReturned = xTaskCreate(
 80002d2:	4b22      	ldr	r3, [pc, #136]	@ (800035c <callingTaskCreation+0xf8>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2302      	movs	r3, #2
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2303      	movs	r3, #3
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	4920      	ldr	r1, [pc, #128]	@ (8000360 <callingTaskCreation+0xfc>)
 80002e0:	4820      	ldr	r0, [pc, #128]	@ (8000364 <callingTaskCreation+0x100>)
 80002e2:	f002 f8cf 	bl	8002484 <xTaskCreate>
 80002e6:	6178      	str	r0, [r7, #20]
                    ( void * ) TASK_THREE_PARAMETER,  /* Parameter passed into the task. */
					(configMAX_PRIORITIES - 5),     /* Priority at which the task is created. */
                    &taskHandleThree );               /* Used to pass out the created task's handle. */

    //if task is not created the through the falut that we can check as run time
    configASSERT(xReturned == pdPASS);
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d00b      	beq.n	8000306 <callingTaskCreation+0xa2>
	__asm volatile
 80002ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	f3bf 8f6f 	isb	sy
 80002fa:	f3bf 8f4f 	dsb	sy
 80002fe:	60bb      	str	r3, [r7, #8]
}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	e7fd      	b.n	8000302 <callingTaskCreation+0x9e>

    // created the fourth task
    /* Create the task, storing the handle. */
    xReturned = xTaskCreate(
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <callingTaskCreation+0x104>)
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2301      	movs	r3, #1
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2304      	movs	r3, #4
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	4916      	ldr	r1, [pc, #88]	@ (800036c <callingTaskCreation+0x108>)
 8000314:	4816      	ldr	r0, [pc, #88]	@ (8000370 <callingTaskCreation+0x10c>)
 8000316:	f002 f8b5 	bl	8002484 <xTaskCreate>
 800031a:	6178      	str	r0, [r7, #20]
                    ( void * ) TASK_FOUR_PARAMETER,  /* Parameter passed into the task. */
					(configMAX_PRIORITIES - 6),     /* Priority at which the task is created. */
                    &taskHandleFour);               /* Used to pass out the created task's handle. */

    //if task is not created the through the falut that we can check as run time
    configASSERT(xReturned == pdPASS);
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d00b      	beq.n	800033a <callingTaskCreation+0xd6>
	__asm volatile
 8000322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000326:	f383 8811 	msr	BASEPRI, r3
 800032a:	f3bf 8f6f 	isb	sy
 800032e:	f3bf 8f4f 	dsb	sy
 8000332:	607b      	str	r3, [r7, #4]
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	e7fd      	b.n	8000336 <callingTaskCreation+0xd2>
}
 800033a:	bf00      	nop
 800033c:	3718      	adds	r7, #24
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000007c 	.word	0x2000007c
 8000348:	08006978 	.word	0x08006978
 800034c:	08000375 	.word	0x08000375
 8000350:	20000080 	.word	0x20000080
 8000354:	08006980 	.word	0x08006980
 8000358:	080003c5 	.word	0x080003c5
 800035c:	20000084 	.word	0x20000084
 8000360:	08006988 	.word	0x08006988
 8000364:	08000415 	.word	0x08000415
 8000368:	20000088 	.word	0x20000088
 800036c:	08006990 	.word	0x08006990
 8000370:	08000465 	.word	0x08000465

08000374 <userTaskOne>:



/* First Task to be created. */
void userTaskOne( void * pvParameters )
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The parameter value is expected to be 1 as 1 is passed in the
       pvParameters value in the call to xTaskCreate() below. */
	configASSERT( ( ( uint32_t ) pvParameters ) ==(uint32_t) (TASK_ONE_PARAMETER ));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d00b      	beq.n	800039a <userTaskOne+0x26>
	__asm volatile
 8000382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000386:	f383 8811 	msr	BASEPRI, r3
 800038a:	f3bf 8f6f 	isb	sy
 800038e:	f3bf 8f4f 	dsb	sy
 8000392:	613b      	str	r3, [r7, #16]
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	e7fd      	b.n	8000396 <userTaskOne+0x22>

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(1);
 800039a:	2301      	movs	r3, #1
 800039c:	617b      	str	r3, [r7, #20]

	/* The xLastWakeTime variable needs to be initialized with the current tick
	count. Note that this is the only time the variable is written to explicitly.
	After this assignment, xLastWakeTime is updated automatically internally within
	vTaskDelayUntil(). */
	xLastWakeTime = xTaskGetTickCount() - 1;
 800039e:	f002 fbaf 	bl	8002b00 <xTaskGetTickCount>
 80003a2:	4603      	mov	r3, r0
 80003a4:	3b01      	subs	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
    {
    	/* This task should execute every 50 milliseconds. Time is measured
    	in ticks. The pdMS_TO_TICKS macro is used to convert milliseconds
    	into ticks. xLastWakeTime is automatically updated within vTaskDelayUntil()
    	so is not explicitly updated by the task. */
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80003a8:	f107 030c 	add.w	r3, r7, #12
 80003ac:	6979      	ldr	r1, [r7, #20]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 f9d2 	bl	8002758 <vTaskDelayUntil>
        /* Task code goes here. */
    	UserPrintf("Task One is running......");
 80003b4:	4802      	ldr	r0, [pc, #8]	@ (80003c0 <userTaskOne+0x4c>)
 80003b6:	f000 f89d 	bl	80004f4 <UserPrintf>
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80003ba:	bf00      	nop
 80003bc:	e7f4      	b.n	80003a8 <userTaskOne+0x34>
 80003be:	bf00      	nop
 80003c0:	08006998 	.word	0x08006998

080003c4 <userTaskTwo>:
}


/* Second Task to be created. */
void userTaskTwo( void * pvParameters )
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    /* The parameter value is expected to be 1 as 1 is passed in the
       pvParameters value in the call to xTaskCreate() below. */

    configASSERT( ( ( uint32_t ) pvParameters ) == (uint32_t)(TASK_TWO_PARAMETER) );
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d00b      	beq.n	80003ea <userTaskTwo+0x26>
	__asm volatile
 80003d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003d6:	f383 8811 	msr	BASEPRI, r3
 80003da:	f3bf 8f6f 	isb	sy
 80003de:	f3bf 8f4f 	dsb	sy
 80003e2:	613b      	str	r3, [r7, #16]
}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <userTaskTwo+0x22>

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(2);
 80003ea:	2302      	movs	r3, #2
 80003ec:	617b      	str	r3, [r7, #20]

	/* The xLastWakeTime variable needs to be initialized with the current tick
	count. Note that this is the only time the variable is written to explicitly.
	After this assignment, xLastWakeTime is updated automatically internally within
	vTaskDelayUntil(). */
	xLastWakeTime = xTaskGetTickCount() - 2;
 80003ee:	f002 fb87 	bl	8002b00 <xTaskGetTickCount>
 80003f2:	4603      	mov	r3, r0
 80003f4:	3b02      	subs	r3, #2
 80003f6:	60fb      	str	r3, [r7, #12]
    {
    	/* This task should execute every 50 milliseconds. Time is measured
    	in ticks. The pdMS_TO_TICKS macro is used to convert milliseconds
    	into ticks. xLastWakeTime is automatically updated within vTaskDelayUntil()
    	so is not explicitly updated by the task. */
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	6979      	ldr	r1, [r7, #20]
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 f9aa 	bl	8002758 <vTaskDelayUntil>

        /* Task code goes here. */
    	UserPrintf("Task Two is running......");
 8000404:	4802      	ldr	r0, [pc, #8]	@ (8000410 <userTaskTwo+0x4c>)
 8000406:	f000 f875 	bl	80004f4 <UserPrintf>
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 800040a:	bf00      	nop
 800040c:	e7f4      	b.n	80003f8 <userTaskTwo+0x34>
 800040e:	bf00      	nop
 8000410:	080069b4 	.word	0x080069b4

08000414 <userTaskThree>:
}


/* third Task to be created. */
void userTaskThree( void * pvParameters )
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    /* The parameter value is expected to be 1 as 1 is passed in the
       pvParameters value in the call to xTaskCreate() below. */

    configASSERT( ( ( uint32_t ) pvParameters ) == (uint32_t)(TASK_THREE_PARAMETER) );
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d00b      	beq.n	800043a <userTaskThree+0x26>
	__asm volatile
 8000422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000426:	f383 8811 	msr	BASEPRI, r3
 800042a:	f3bf 8f6f 	isb	sy
 800042e:	f3bf 8f4f 	dsb	sy
 8000432:	613b      	str	r3, [r7, #16]
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	e7fd      	b.n	8000436 <userTaskThree+0x22>

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(4);
 800043a:	2304      	movs	r3, #4
 800043c:	617b      	str	r3, [r7, #20]

	/* The xLastWakeTime variable needs to be initialized with the current tick
	count. Note that this is the only time the variable is written to explicitly.
	After this assignment, xLastWakeTime is updated automatically internally within
	vTaskDelayUntil(). */
	xLastWakeTime = xTaskGetTickCount() - 4;
 800043e:	f002 fb5f 	bl	8002b00 <xTaskGetTickCount>
 8000442:	4603      	mov	r3, r0
 8000444:	3b04      	subs	r3, #4
 8000446:	60fb      	str	r3, [r7, #12]
    {
    	/* This task should execute every 50 milliseconds. Time is measured
    	in ticks. The pdMS_TO_TICKS macro is used to convert milliseconds
    	into ticks. xLastWakeTime is automatically updated within vTaskDelayUntil()
    	so is not explicitly updated by the task. */
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	6979      	ldr	r1, [r7, #20]
 800044e:	4618      	mov	r0, r3
 8000450:	f002 f982 	bl	8002758 <vTaskDelayUntil>

        /* Task code goes here. */
    	UserPrintf("Task Three is running......");
 8000454:	4802      	ldr	r0, [pc, #8]	@ (8000460 <userTaskThree+0x4c>)
 8000456:	f000 f84d 	bl	80004f4 <UserPrintf>
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 800045a:	bf00      	nop
 800045c:	e7f4      	b.n	8000448 <userTaskThree+0x34>
 800045e:	bf00      	nop
 8000460:	080069d0 	.word	0x080069d0

08000464 <userTaskFour>:



/* fourth Task to be created. */
void userTaskFour( void * pvParameters )
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    /* The parameter value is expected to be 1 as 1 is passed in the
       pvParameters value in the call to xTaskCreate() below. */

    configASSERT( ( ( uint32_t ) pvParameters ) ==(uint32_t) (TASK_FOUR_PARAMETER) );
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d00b      	beq.n	800048a <userTaskFour+0x26>
	__asm volatile
 8000472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000476:	f383 8811 	msr	BASEPRI, r3
 800047a:	f3bf 8f6f 	isb	sy
 800047e:	f3bf 8f4f 	dsb	sy
 8000482:	613b      	str	r3, [r7, #16]
}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <userTaskFour+0x22>

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(8);
 800048a:	2308      	movs	r3, #8
 800048c:	617b      	str	r3, [r7, #20]

	/* The xLastWakeTime variable needs to be initialized with the current tick
	count. Note that this is the only time the variable is written to explicitly.
	After this assignment, xLastWakeTime is updated automatically internally within
	vTaskDelayUntil(). */
	xLastWakeTime = xTaskGetTickCount() - 8;
 800048e:	f002 fb37 	bl	8002b00 <xTaskGetTickCount>
 8000492:	4603      	mov	r3, r0
 8000494:	3b08      	subs	r3, #8
 8000496:	60fb      	str	r3, [r7, #12]
    {
    	/* This task should execute every 50 milliseconds. Time is measured
    	in ticks. The pdMS_TO_TICKS macro is used to convert milliseconds
    	into ticks. xLastWakeTime is automatically updated within vTaskDelayUntil()
    	so is not explicitly updated by the task. */
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	6979      	ldr	r1, [r7, #20]
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f95a 	bl	8002758 <vTaskDelayUntil>

    	UserPrintf("Task Four is running......");
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <userTaskFour+0x4c>)
 80004a6:	f000 f825 	bl	80004f4 <UserPrintf>
    	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80004aa:	bf00      	nop
 80004ac:	e7f4      	b.n	8000498 <userTaskFour+0x34>
 80004ae:	bf00      	nop
 80004b0:	080069ec 	.word	0x080069ec

080004b4 <vApplicationIdleHook>:
    }
}


void vApplicationIdleHook( void )
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  // Your code here
	UserPrintf("Task Idle is running......");
 80004b8:	4803      	ldr	r0, [pc, #12]	@ (80004c8 <vApplicationIdleHook+0x14>)
 80004ba:	f000 f81b 	bl	80004f4 <UserPrintf>
	orangeLedToggling();
 80004be:	f000 f877 	bl	80005b0 <orangeLedToggling>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	08006a08 	.word	0x08006a08

080004cc <SEEGER_RTTInit>:
#include "string.h"
#include "SEGGER_application.h"


// defination of the function
void SEEGER_RTTInit(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8

	// this is the SEGGER in upbuffer initilize
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80004d2:	2300      	movs	r3, #0
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2300      	movs	r3, #0
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	2000      	movs	r0, #0
 80004de:	f004 f985 	bl	80047ec <SEGGER_RTT_ConfigUpBuffer>

	// testing the data
	SEGGER_RTT_printf(0,".........Hello FREE RTOS Embedded World...............\r\n");
 80004e2:	4903      	ldr	r1, [pc, #12]	@ (80004f0 <SEEGER_RTTInit+0x24>)
 80004e4:	2000      	movs	r0, #0
 80004e6:	f004 fdb9 	bl	800505c <SEGGER_RTT_printf>
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08006a24 	.word	0x08006a24

080004f4 <UserPrintf>:

void UserPrintf(const char *userBuffer){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	// this is the going to the proint the data on the console
	SEGGER_RTT_printf(0,"%s\r\n",&userBuffer[0]);
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4904      	ldr	r1, [pc, #16]	@ (8000510 <UserPrintf+0x1c>)
 8000500:	2000      	movs	r0, #0
 8000502:	f004 fdab 	bl	800505c <SEGGER_RTT_printf>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08006a60 	.word	0x08006a60

08000514 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	619a      	str	r2, [r3, #24]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	041a      	lsls	r2, r3, #16
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	619a      	str	r2, [r3, #24]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	4013      	ands	r3, r2
 8000564:	041a      	lsls	r2, r3, #16
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	43d9      	mvns	r1, r3
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	400b      	ands	r3, r1
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	619a      	str	r2, [r3, #24]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <orangeLed>:
#include "led_application.h"



// Orange LED Defination
void orangeLed(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(GPIOD , LED3_Pin);
 8000584:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000588:	4808      	ldr	r0, [pc, #32]	@ (80005ac <orangeLed+0x2c>)
 800058a:	f7ff ffc3 	bl	8000514 <LL_GPIO_SetOutputPin>

	LL_mDelay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000592:	f001 f907 	bl	80017a4 <LL_mDelay>

	LL_GPIO_ResetOutputPin(GPIOD , LED3_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	4804      	ldr	r0, [pc, #16]	@ (80005ac <orangeLed+0x2c>)
 800059c:	f7ff ffc8 	bl	8000530 <LL_GPIO_ResetOutputPin>

	LL_mDelay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a4:	f001 f8fe 	bl	80017a4 <LL_mDelay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <orangeLedToggling>:

void orangeLedToggling(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	LL_GPIO_TogglePin(GPIOD,LED3_Pin);
 80005b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <orangeLedToggling+0x14>)
 80005ba:	f7ff ffc8 	bl	800054e <LL_GPIO_TogglePin>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <LL_RCC_HSE_Enable+0x1c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <LL_RCC_HSE_Enable+0x1c>)
 80005d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800

080005e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <LL_RCC_HSE_IsReady+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80005f8:	bf0c      	ite	eq
 80005fa:	2301      	moveq	r3, #1
 80005fc:	2300      	movne	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <LL_RCC_SetSysClkSource+0x24>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f023 0203 	bic.w	r2, r3, #3
 8000620:	4904      	ldr	r1, [pc, #16]	@ (8000634 <LL_RCC_SetSysClkSource+0x24>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	608b      	str	r3, [r1, #8]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40023800 	.word	0x40023800

08000638 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <LL_RCC_GetSysClkSource+0x18>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f003 030c 	and.w	r3, r3, #12
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <LL_RCC_SetAHBPrescaler+0x24>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000664:	4904      	ldr	r1, [pc, #16]	@ (8000678 <LL_RCC_SetAHBPrescaler+0x24>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4313      	orrs	r3, r2
 800066a:	608b      	str	r3, [r1, #8]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800068c:	4904      	ldr	r1, [pc, #16]	@ (80006a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	608b      	str	r3, [r1, #8]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80006b4:	4904      	ldr	r1, [pc, #16]	@ (80006c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	608b      	str	r3, [r1, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LL_RCC_PLL_Enable+0x1c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <LL_RCC_PLL_Enable+0x1c>)
 80006d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <LL_RCC_PLL_IsReady+0x24>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80006fc:	bf0c      	ite	eq
 80006fe:	2301      	moveq	r3, #1
 8000700:	2300      	movne	r3, #0
 8000702:	b2db      	uxtb	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000728:	4013      	ands	r3, r2
 800072a:	68f9      	ldr	r1, [r7, #12]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	4311      	orrs	r1, r2
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0192      	lsls	r2, r2, #6
 8000734:	430a      	orrs	r2, r1
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000738:	4313      	orrs	r3, r2
 800073a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000744:	4904      	ldr	r1, [pc, #16]	@ (8000758 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	4313      	orrs	r3, r2
 800074a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800
 800075c:	ffbf8000 	.word	0xffbf8000

08000760 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800076a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800076c:	4907      	ldr	r1, [pc, #28]	@ (800078c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4013      	ands	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800

08000790 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <LL_FLASH_SetLatency+0x24>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f023 0207 	bic.w	r2, r3, #7
 80007a0:	4904      	ldr	r1, [pc, #16]	@ (80007b4 <LL_FLASH_SetLatency+0x24>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	600b      	str	r3, [r1, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023c00 	.word	0x40023c00

080007b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <LL_FLASH_GetLatency+0x18>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0307 	and.w	r3, r3, #7
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023c00 	.word	0x40023c00

080007d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80007e4:	4904      	ldr	r1, [pc, #16]	@ (80007f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	600b      	str	r3, [r1, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40007000 	.word	0x40007000

080007fc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800080c:	bf0c      	ite	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	2300      	movne	r3, #0
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40007000 	.word	0x40007000

08000824 <LL_GPIO_ResetOutputPin>:
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	041a      	lsls	r2, r3, #16
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	619a      	str	r2, [r3, #24]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b5b0      	push	{r4, r5, r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1<<0);
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <main+0x5c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <main+0x5c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 f9d3 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f827 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 f875 	bl	800094c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000862:	f003 fd8f 	bl	8004384 <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 8000866:	f003 fb39 	bl	8003edc <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800086a:	f005 f88f 	bl	800598c <SEGGER_SYSVIEW_Start>
  SEEGER_RTTInit();
 800086e:	f7ff fe2d 	bl	80004cc <SEEGER_RTTInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <main+0x60>)
 8000874:	1d3c      	adds	r4, r7, #4
 8000876:	461d      	mov	r5, r3
 8000878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f000 ffe2 	bl	800184e <osThreadCreate>
 800088a:	4603      	mov	r3, r0
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <main+0x64>)
 800088e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  callingTaskCreation();
 8000890:	f7ff fce8 	bl	8000264 <callingTaskCreation>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000894:	f000 ffd4 	bl	8001840 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  orangeLed();   //default blinking 1ms
 8000898:	f7ff fe72 	bl	8000580 <orangeLed>
 800089c:	e7fc      	b.n	8000898 <main+0x54>
 800089e:	bf00      	nop
 80008a0:	e0001000 	.word	0xe0001000
 80008a4:	08006a78 	.word	0x08006a78
 80008a8:	2000008c 	.word	0x2000008c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f7ff ff6d 	bl	8000790 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80008b6:	bf00      	nop
 80008b8:	f7ff ff7e 	bl	80007b8 <LL_FLASH_GetLatency>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b05      	cmp	r3, #5
 80008c0:	d1fa      	bne.n	80008b8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80008c2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80008c6:	f7ff ff85 	bl	80007d4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80008ca:	f7ff fe7d 	bl	80005c8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008ce:	bf00      	nop
 80008d0:	f7ff fe8a 	bl	80005e8 <LL_RCC_HSE_IsReady>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d1fa      	bne.n	80008d0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80008da:	2300      	movs	r3, #0
 80008dc:	22a8      	movs	r2, #168	@ 0xa8
 80008de:	2104      	movs	r1, #4
 80008e0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80008e4:	f7ff ff16 	bl	8000714 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008e8:	f7ff fef0 	bl	80006cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008ec:	bf00      	nop
 80008ee:	f7ff fefd 	bl	80006ec <LL_RCC_PLL_IsReady>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d1fa      	bne.n	80008ee <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80008f8:	bf00      	nop
 80008fa:	f7ff ff7f 	bl	80007fc <LL_PWR_IsActiveFlag_VOS>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0fa      	beq.n	80008fa <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fea5 	bl	8000654 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800090a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800090e:	f7ff feb5 	bl	800067c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000912:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000916:	f7ff fec5 	bl	80006a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fe78 	bl	8000610 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000920:	bf00      	nop
 8000922:	f7ff fe89 	bl	8000638 <LL_RCC_GetSysClkSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b08      	cmp	r3, #8
 800092a:	d1fa      	bne.n	8000922 <SystemClock_Config+0x76>
  {

  }
  LL_SetSystemCoreClock(168000000);
 800092c:	4806      	ldr	r0, [pc, #24]	@ (8000948 <SystemClock_Config+0x9c>)
 800092e:	f000 ff5f 	bl	80017f0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f886 	bl	8000a44 <HAL_InitTick>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800093e:	f000 f84f 	bl	80009e0 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	0a037a00 	.word	0x0a037a00

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000962:	2080      	movs	r0, #128	@ 0x80
 8000964:	f7ff fefc 	bl	8000760 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000968:	2008      	movs	r0, #8
 800096a:	f7ff fef9 	bl	8000760 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fef6 	bl	8000760 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin);
 8000974:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0x5c>)
 800097a:	f7ff ff53 	bl	8000824 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED5_Pin|LED6_Pin;
 800097e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000982:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <MX_GPIO_Init+0x5c>)
 800099a:	f000 fe82 	bl	80016a2 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020c00 	.word	0x40020c00

080009ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 ff71 	bl	800189c <osDelay>
 80009ba:	e7fb      	b.n	80009b4 <StartDefaultTask+0x8>

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009ce:	f000 f939 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40001000 	.word	0x40001000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <HAL_MspInit+0x54>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_MspInit+0x54>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	f06f 0001 	mvn.w	r0, #1
 8000a32:	f000 f9d3 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	@ 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b33      	ldr	r3, [pc, #204]	@ (8000b28 <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a32      	ldr	r2, [pc, #200]	@ (8000b28 <HAL_InitTick+0xe4>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <HAL_InitTick+0xe4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f9f8 	bl	8000e70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8a:	f000 f9dd 	bl	8000e48 <HAL_RCC_GetPCLK1Freq>
 8000a8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a90:	e004      	b.n	8000a9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a92:	f000 f9d9 	bl	8000e48 <HAL_RCC_GetPCLK1Freq>
 8000a96:	4603      	mov	r3, r0
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a9e:	4a23      	ldr	r2, [pc, #140]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	0c9b      	lsrs	r3, r3, #18
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <HAL_InitTick+0xec>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000aae:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <HAL_InitTick+0xec>)
 8000ab2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_InitTick+0xec>)
 8000aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000abc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_InitTick+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <HAL_InitTick+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ad0:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <HAL_InitTick+0xec>)
 8000ad2:	f000 f9ff 	bl	8000ed4 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11b      	bne.n	8000b1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ae4:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <HAL_InitTick+0xec>)
 8000ae6:	f000 fa4f 	bl	8000f88 <HAL_TIM_Base_Start_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d111      	bne.n	8000b1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af8:	2036      	movs	r0, #54	@ 0x36
 8000afa:	f000 f98b 	bl	8000e14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d808      	bhi.n	8000b16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	2036      	movs	r0, #54	@ 0x36
 8000b0a:	f000 f967 	bl	8000ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_InitTick+0xf4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e002      	b.n	8000b1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3738      	adds	r7, #56	@ 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000090 	.word	0x20000090
 8000b34:	40001000 	.word	0x40001000
 8000b38:	20000004 	.word	0x20000004

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x4>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <TIM6_DAC_IRQHandler+0x10>)
 8000b7a:	f000 fa75 	bl	8001068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000090 	.word	0x20000090

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f005 fdd9 	bl	8006790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fe31 	bl	8000844 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bf0:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 8000bf4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bf8:	20006664 	.word	0x20006664

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8cc 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff ff08 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff feda 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200000d8 	.word	0x200000d8

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000

08000e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_RCC_GetHCLKFreq>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	0a9b      	lsrs	r3, r3, #10
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	4903      	ldr	r1, [pc, #12]	@ (8000e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e5e:	5ccb      	ldrb	r3, [r1, r3]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	08006b74 	.word	0x08006b74

08000e70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_RCC_GetClockConfig+0x5c>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <HAL_RCC_GetClockConfig+0x5c>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_RCC_GetClockConfig+0x5c>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_RCC_GetClockConfig+0x5c>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_RCC_GetClockConfig+0x60>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0207 	and.w	r2, r3, #7
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e041      	b.n	8000f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f839 	bl	8000f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 f9c0 	bl	8001298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d001      	beq.n	8000fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e04e      	b.n	800103e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a23      	ldr	r2, [pc, #140]	@ (800104c <HAL_TIM_Base_Start_IT+0xc4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d022      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fca:	d01d      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_TIM_Base_Start_IT+0xc8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d018      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_TIM_Base_Start_IT+0xcc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <HAL_TIM_Base_Start_IT+0xd0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00e      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <HAL_TIM_Base_Start_IT+0xd4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d009      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <HAL_TIM_Base_Start_IT+0xd8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d004      	beq.n	8001008 <HAL_TIM_Base_Start_IT+0x80>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a18      	ldr	r2, [pc, #96]	@ (8001064 <HAL_TIM_Base_Start_IT+0xdc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d111      	bne.n	800102c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b06      	cmp	r3, #6
 8001018:	d010      	beq.n	800103c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800102a:	e007      	b.n	800103c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000
 8001050:	40000400 	.word	0x40000400
 8001054:	40000800 	.word	0x40000800
 8001058:	40000c00 	.word	0x40000c00
 800105c:	40010400 	.word	0x40010400
 8001060:	40014000 	.word	0x40014000
 8001064:	40001800 	.word	0x40001800

08001068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d020      	beq.n	80010cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d01b      	beq.n	80010cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f06f 0202 	mvn.w	r2, #2
 800109c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f8d2 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80010b8:	e005      	b.n	80010c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8c4 	bl	8001248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8d5 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d020      	beq.n	8001118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d01b      	beq.n	8001118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f06f 0204 	mvn.w	r2, #4
 80010e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2202      	movs	r2, #2
 80010ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8ac 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8001104:	e005      	b.n	8001112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f89e 	bl	8001248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f8af 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d020      	beq.n	8001164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01b      	beq.n	8001164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f06f 0208 	mvn.w	r2, #8
 8001134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f886 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8001150:	e005      	b.n	800115e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f878 	bl	8001248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f889 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b00      	cmp	r3, #0
 800116c:	d020      	beq.n	80011b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01b      	beq.n	80011b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f06f 0210 	mvn.w	r2, #16
 8001180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2208      	movs	r2, #8
 8001186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f860 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 800119c:	e005      	b.n	80011aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f852 	bl	8001248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f863 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f06f 0201 	mvn.w	r2, #1
 80011cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fbf4 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00c      	beq.n	80011f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80011f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f900 	bl	80013f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00c      	beq.n	800121c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f834 	bl	8001284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f06f 0220 	mvn.w	r2, #32
 8001238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f8d2 	bl	80013e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a43      	ldr	r2, [pc, #268]	@ (80013b8 <TIM_Base_SetConfig+0x120>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b6:	d00f      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a40      	ldr	r2, [pc, #256]	@ (80013bc <TIM_Base_SetConfig+0x124>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00b      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	@ (80013c0 <TIM_Base_SetConfig+0x128>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3e      	ldr	r2, [pc, #248]	@ (80013c4 <TIM_Base_SetConfig+0x12c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d003      	beq.n	80012d8 <TIM_Base_SetConfig+0x40>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3d      	ldr	r2, [pc, #244]	@ (80013c8 <TIM_Base_SetConfig+0x130>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d108      	bne.n	80012ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a32      	ldr	r2, [pc, #200]	@ (80013b8 <TIM_Base_SetConfig+0x120>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d027      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <TIM_Base_SetConfig+0x124>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d023      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a2e      	ldr	r2, [pc, #184]	@ (80013c0 <TIM_Base_SetConfig+0x128>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <TIM_Base_SetConfig+0x12c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a2c      	ldr	r2, [pc, #176]	@ (80013c8 <TIM_Base_SetConfig+0x130>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d017      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a2b      	ldr	r2, [pc, #172]	@ (80013cc <TIM_Base_SetConfig+0x134>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <TIM_Base_SetConfig+0x138>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00f      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <TIM_Base_SetConfig+0x13c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00b      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <TIM_Base_SetConfig+0x140>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a27      	ldr	r2, [pc, #156]	@ (80013dc <TIM_Base_SetConfig+0x144>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d003      	beq.n	800134a <TIM_Base_SetConfig+0xb2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <TIM_Base_SetConfig+0x148>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d108      	bne.n	800135c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <TIM_Base_SetConfig+0x120>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <TIM_Base_SetConfig+0xf2>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <TIM_Base_SetConfig+0x130>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d103      	bne.n	8001392 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f043 0204 	orr.w	r2, r3, #4
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40000800 	.word	0x40000800
 80013c4:	40000c00 	.word	0x40000c00
 80013c8:	40010400 	.word	0x40010400
 80013cc:	40014000 	.word	0x40014000
 80013d0:	40014400 	.word	0x40014400
 80013d4:	40014800 	.word	0x40014800
 80013d8:	40001800 	.word	0x40001800
 80013dc:	40001c00 	.word	0x40001c00
 80013e0:	40002000 	.word	0x40002000

080013e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_GPIO_SetPinMode>:
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	@ 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	613b      	str	r3, [r7, #16]
  return result;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001432:	2320      	movs	r3, #32
 8001434:	e003      	b.n	800143e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2103      	movs	r1, #3
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	401a      	ands	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	61fb      	str	r3, [r7, #28]
  return result;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001460:	2320      	movs	r3, #32
 8001462:	e003      	b.n	800146c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	372c      	adds	r7, #44	@ 0x2c
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_GPIO_SetPinOutputType>:
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	605a      	str	r2, [r3, #4]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_GPIO_SetPinSpeed>:
{
 80014b6:	b480      	push	{r7}
 80014b8:	b08b      	sub	sp, #44	@ 0x2c
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	613b      	str	r3, [r7, #16]
  return result;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80014dc:	2320      	movs	r3, #32
 80014de:	e003      	b.n	80014e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2103      	movs	r1, #3
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	61fb      	str	r3, [r7, #28]
  return result;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800150a:	2320      	movs	r3, #32
 800150c:	e003      	b.n	8001516 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	372c      	adds	r7, #44	@ 0x2c
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_GPIO_SetPinPull>:
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	@ 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	613b      	str	r3, [r7, #16]
  return result;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001556:	2320      	movs	r3, #32
 8001558:	e003      	b.n	8001562 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2103      	movs	r1, #3
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	61fb      	str	r3, [r7, #28]
  return result;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001584:	2320      	movs	r3, #32
 8001586:	e003      	b.n	8001590 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	60da      	str	r2, [r3, #12]
}
 800159e:	bf00      	nop
 80015a0:	372c      	adds	r7, #44	@ 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_GPIO_SetAFPin_0_7>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b08b      	sub	sp, #44	@ 0x2c
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	613b      	str	r3, [r7, #16]
  return result;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80015d0:	2320      	movs	r3, #32
 80015d2:	e003      	b.n	80015dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	210f      	movs	r1, #15
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	61fb      	str	r3, [r7, #28]
  return result;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80015fe:	2320      	movs	r3, #32
 8001600:	e003      	b.n	800160a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	621a      	str	r2, [r3, #32]
}
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	@ 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_GPIO_SetAFPin_8_15>:
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	@ 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	613b      	str	r3, [r7, #16]
  return result;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e003      	b.n	8001658 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	210f      	movs	r1, #15
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	61fb      	str	r3, [r7, #28]
  return result;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e003      	b.n	8001688 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	@ 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b08a      	sub	sp, #40	@ 0x28
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	617b      	str	r3, [r7, #20]
  return result;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <LL_GPIO_Init+0x2e>
    return 32U;
 80016cc:	2320      	movs	r3, #32
 80016ce:	e003      	b.n	80016d8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016da:	e057      	b.n	800178c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d049      	beq.n	8001786 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d003      	beq.n	8001702 <LL_GPIO_Init+0x60>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d10d      	bne.n	800171e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	461a      	mov	r2, r3
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fed3 	bl	80014b6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	461a      	mov	r2, r3
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff feb4 	bl	8001486 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	461a      	mov	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff02 	bl	8001530 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d121      	bne.n	8001778 <LL_GPIO_Init+0xd6>
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	60bb      	str	r3, [r7, #8]
  return result;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <LL_GPIO_Init+0xac>
    return 32U;
 800174a:	2320      	movs	r3, #32
 800174c:	e003      	b.n	8001756 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fab3 f383 	clz	r3, r3
 8001754:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001756:	2b07      	cmp	r3, #7
 8001758:	d807      	bhi.n	800176a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	461a      	mov	r2, r3
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff21 	bl	80015aa <LL_GPIO_SetAFPin_0_7>
 8001768:	e006      	b.n	8001778 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	461a      	mov	r2, r3
 8001770:	6a39      	ldr	r1, [r7, #32]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff56 	bl	8001624 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fe43 	bl	800140c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1a0      	bne.n	80016dc <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <LL_mDelay+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80017b2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ba:	d00c      	beq.n	80017d6 <LL_mDelay+0x32>
  {
    Delay++;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80017c2:	e008      	b.n	80017d6 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <LL_mDelay+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <LL_mDelay+0x32>
    {
      Delay--;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f3      	bne.n	80017c4 <LL_mDelay+0x20>
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <LL_SetSystemCoreClock+0x1c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000

08001810 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	2b84      	cmp	r3, #132	@ 0x84
 8001824:	d005      	beq.n	8001832 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	3303      	adds	r3, #3
 8001830:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001844:	f001 f846 	bl	80028d4 <vTaskStartScheduler>
  
  return osOK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}

0800184e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800184e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001850:	b087      	sub	sp, #28
 8001852:	af02      	add	r7, sp, #8
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685c      	ldr	r4, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001864:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffcf 	bl	8001810 <makeFreeRtosPriority>
 8001872:	4602      	mov	r2, r0
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4632      	mov	r2, r6
 8001880:	4629      	mov	r1, r5
 8001882:	4620      	mov	r0, r4
 8001884:	f000 fdfe 	bl	8002484 <xTaskCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <osDelay+0x16>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	e000      	b.n	80018b4 <osDelay+0x18>
 80018b2:	2301      	movs	r3, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 ffd3 	bl	8002860 <vTaskDelay>
  
  return osOK;
 80018ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f103 0208 	add.w	r2, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f103 0208 	add.w	r2, r3, #8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 0208 	add.w	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800197c:	d103      	bne.n	8001986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e00c      	b.n	80019a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3308      	adds	r3, #8
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e002      	b.n	8001994 <vListInsert+0x2e>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	d2f6      	bcs.n	800198e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6892      	ldr	r2, [r2, #8]
 80019ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d103      	bne.n	8001a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10b      	bne.n	8001a58 <xQueueGenericReset+0x2c>
	__asm volatile
 8001a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a44:	f383 8811 	msr	BASEPRI, r3
 8001a48:	f3bf 8f6f 	isb	sy
 8001a4c:	f3bf 8f4f 	dsb	sy
 8001a50:	60bb      	str	r3, [r7, #8]
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001a58:	f002 f916 	bl	8003c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	441a      	add	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	22ff      	movs	r2, #255	@ 0xff
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	22ff      	movs	r2, #255	@ 0xff
 8001aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d114      	bne.n	8001ad8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01a      	beq.n	8001aec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3310      	adds	r3, #16
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 f9c8 	bl	8002e50 <xTaskRemoveFromEventList>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d012      	beq.n	8001aec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <xQueueGenericReset+0xd0>)
 8001ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f3bf 8f4f 	dsb	sy
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	e009      	b.n	8001aec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3310      	adds	r3, #16
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fef1 	bl	80018c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3324      	adds	r3, #36	@ 0x24
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff feec 	bl	80018c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001aec:	f002 f8fe 	bl	8003cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000ed04 	.word	0xe000ed04

08001b00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	@ 0x28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <xQueueGenericCreate+0x2c>
	__asm volatile
 8001b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b18:	f383 8811 	msr	BASEPRI, r3
 8001b1c:	f3bf 8f6f 	isb	sy
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	613b      	str	r3, [r7, #16]
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3348      	adds	r3, #72	@ 0x48
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fa26 	bl	8003f8c <pvPortMalloc>
 8001b40:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00d      	beq.n	8001b64 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3348      	adds	r3, #72	@ 0x48
 8001b50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f805 	bl	8001b6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b64:	69bb      	ldr	r3, [r7, #24]
	}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e002      	b.n	8001b90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	69b8      	ldr	r0, [r7, #24]
 8001ba0:	f7ff ff44 	bl	8001a2c <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	2073      	movs	r0, #115	@ 0x73
 8001bac:	f003 fde6 	bl	800577c <SEGGER_SYSVIEW_RecordU32x3>
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b090      	sub	sp, #64	@ 0x40
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10b      	bne.n	8001bec <xQueueGenericSend+0x34>
	__asm volatile
 8001bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bd8:	f383 8811 	msr	BASEPRI, r3
 8001bdc:	f3bf 8f6f 	isb	sy
 8001be0:	f3bf 8f4f 	dsb	sy
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <xQueueGenericSend+0x42>
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <xQueueGenericSend+0x46>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <xQueueGenericSend+0x48>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <xQueueGenericSend+0x64>
	__asm volatile
 8001c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <xQueueGenericSend+0x72>
 8001c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <xQueueGenericSend+0x76>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <xQueueGenericSend+0x78>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <xQueueGenericSend+0x94>
	__asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	623b      	str	r3, [r7, #32]
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c4c:	f001 faac 	bl	80031a8 <xTaskGetSchedulerState>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <xQueueGenericSend+0xa4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <xQueueGenericSend+0xa8>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <xQueueGenericSend+0xaa>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <xQueueGenericSend+0xc6>
	__asm volatile
 8001c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	61fb      	str	r3, [r7, #28]
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	e7fd      	b.n	8001c7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c7e:	f002 f803 	bl	8003c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <xQueueGenericSend+0xdc>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d136      	bne.n	8001d02 <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8001c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fafa 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	205a      	movs	r0, #90	@ 0x5a
 8001caa:	f003 fddd 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cb4:	f000 fa70 	bl	8002198 <prvCopyDataToQueue>
 8001cb8:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc4:	3324      	adds	r3, #36	@ 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 f8c2 	bl	8002e50 <xTaskRemoveFromEventList>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d013      	beq.n	8001cfa <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <xQueueGenericSend+0x250>)
 8001cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	e00a      	b.n	8001cfa <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <xQueueGenericSend+0x250>)
 8001cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cfa:	f001 fff7 	bl	8003cec <vPortExitCritical>
				return pdPASS;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07d      	b.n	8001dfe <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d110      	bne.n	8001d2a <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d08:	f001 fff0 	bl	8003cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 fabe 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	205a      	movs	r0, #90	@ 0x5a
 8001d22:	f003 fda1 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e069      	b.n	8001dfe <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d106      	bne.n	8001d3e <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f8f3 	bl	8002f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d3e:	f001 ffd5 	bl	8003cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d42:	f000 fe2d 	bl	80029a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d46:	f001 ff9f 	bl	8003c88 <vPortEnterCritical>
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d56:	d103      	bne.n	8001d60 <xQueueGenericSend+0x1a8>
 8001d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d6c:	d103      	bne.n	8001d76 <xQueueGenericSend+0x1be>
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d76:	f001 ffb9 	bl	8003cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d7a:	1d3a      	adds	r2, r7, #4
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f8e2 	bl	8002f4c <xTaskCheckForTimeOut>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d124      	bne.n	8001dd8 <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d90:	f000 fafa 	bl	8002388 <prvIsQueueFull>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d018      	beq.n	8001dcc <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fffe 	bl	8002da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001daa:	f000 fa85 	bl	80022b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001dae:	f000 fe05 	bl	80029bc <xTaskResumeAll>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f af62 	bne.w	8001c7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <xQueueGenericSend+0x250>)
 8001dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	e758      	b.n	8001c7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001dce:	f000 fa73 	bl	80022b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dd2:	f000 fdf3 	bl	80029bc <xTaskResumeAll>
 8001dd6:	e752      	b.n	8001c7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001dda:	f000 fa6d 	bl	80022b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dde:	f000 fded 	bl	80029bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fa53 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	460b      	mov	r3, r1
 8001df4:	4601      	mov	r1, r0
 8001df6:	205a      	movs	r0, #90	@ 0x5a
 8001df8:	f003 fd36 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001dfc:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3738      	adds	r7, #56	@ 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000ed04 	.word	0xe000ed04

08001e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	@ 0x40
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <xQueueGenericSendFromISR+0x3e>
 8001e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <xQueueGenericSendFromISR+0x42>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <xQueueGenericSendFromISR+0x44>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d103      	bne.n	8001e7a <xQueueGenericSendFromISR+0x6e>
 8001e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <xQueueGenericSendFromISR+0x72>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <xQueueGenericSendFromISR+0x74>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	623b      	str	r3, [r7, #32]
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e9c:	f001 ffdc 	bl	8003e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ea0:	f3ef 8211 	mrs	r2, BASEPRI
 8001ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	61fa      	str	r2, [r7, #28]
 8001eb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <xQueueGenericSendFromISR+0xc2>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d139      	bne.n	8001f42 <xQueueGenericSendFromISR+0x136>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ed4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f9d5 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	461a      	mov	r2, r3
 8001eec:	2060      	movs	r0, #96	@ 0x60
 8001eee:	f003 fbeb 	bl	80056c8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ef8:	f000 f94e 	bl	8002198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001efc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f04:	d112      	bne.n	8001f2c <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <xQueueGenericSendFromISR+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	3324      	adds	r3, #36	@ 0x24
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 ff9c 	bl	8002e50 <xTaskRemoveFromEventList>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <xQueueGenericSendFromISR+0x130>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <xQueueGenericSendFromISR+0x130>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	b25a      	sxtb	r2, r3
 8001f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001f40:	e00b      	b.n	8001f5a <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f9a3 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2060      	movs	r0, #96	@ 0x60
 8001f52:	f003 fbb9 	bl	80056c8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001f64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3740      	adds	r7, #64	@ 0x40
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b08f      	sub	sp, #60	@ 0x3c
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <xQueueReceive+0x32>
	__asm volatile
 8001f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	623b      	str	r3, [r7, #32]
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	e7fd      	b.n	8001f9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <xQueueReceive+0x40>
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <xQueueReceive+0x44>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <xQueueReceive+0x46>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <xQueueReceive+0x62>
	__asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	61fb      	str	r3, [r7, #28]
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	e7fd      	b.n	8001fce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fd2:	f001 f8e9 	bl	80031a8 <xTaskGetSchedulerState>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <xQueueReceive+0x72>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <xQueueReceive+0x76>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <xQueueReceive+0x78>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <xQueueReceive+0x94>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	61bb      	str	r3, [r7, #24]
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002004:	f001 fe40 	bl	8003c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d02f      	beq.n	8002074 <xQueueReceive+0x104>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002018:	f000 f928 	bl	800226c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800201c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f936 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8002024:	4604      	mov	r4, r0
 8002026:	2000      	movs	r0, #0
 8002028:	f004 f932 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 800202c:	4602      	mov	r2, r0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2101      	movs	r1, #1
 8002032:	9100      	str	r1, [sp, #0]
 8002034:	4621      	mov	r1, r4
 8002036:	205c      	movs	r0, #92	@ 0x5c
 8002038:	f003 fc16 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002042:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00f      	beq.n	800206c <xQueueReceive+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	3310      	adds	r3, #16
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fefd 	bl	8002e50 <xTaskRemoveFromEventList>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <xQueueReceive+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800205c:	4b4d      	ldr	r3, [pc, #308]	@ (8002194 <xQueueReceive+0x224>)
 800205e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800206c:	f001 fe3e 	bl	8003cec <vPortExitCritical>
				return pdPASS;
 8002070:	2301      	movs	r3, #1
 8002072:	e08a      	b.n	800218a <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <xQueueReceive+0x132>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800207a:	f001 fe37 	bl	8003cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	4618      	mov	r0, r3
 8002082:	f004 f905 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8002086:	4604      	mov	r4, r0
 8002088:	2000      	movs	r0, #0
 800208a:	f004 f901 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 800208e:	4602      	mov	r2, r0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2101      	movs	r1, #1
 8002094:	9100      	str	r1, [sp, #0]
 8002096:	4621      	mov	r1, r4
 8002098:	205c      	movs	r0, #92	@ 0x5c
 800209a:	f003 fbe5 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800209e:	2300      	movs	r3, #0
 80020a0:	e073      	b.n	800218a <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <xQueueReceive+0x146>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 ff37 	bl	8002f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020b6:	f001 fe19 	bl	8003cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020ba:	f000 fc71 	bl	80029a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020be:	f001 fde3 	bl	8003c88 <vPortEnterCritical>
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020ce:	d103      	bne.n	80020d8 <xQueueReceive+0x168>
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020e4:	d103      	bne.n	80020ee <xQueueReceive+0x17e>
 80020e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020ee:	f001 fdfd 	bl	8003cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020f2:	1d3a      	adds	r2, r7, #4
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 ff26 	bl	8002f4c <xTaskCheckForTimeOut>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d124      	bne.n	8002150 <xQueueReceive+0x1e0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002108:	f000 f928 	bl	800235c <prvIsQueueEmpty>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d018      	beq.n	8002144 <xQueueReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	3324      	adds	r3, #36	@ 0x24
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fe42 	bl	8002da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002120:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002122:	f000 f8c9 	bl	80022b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002126:	f000 fc49 	bl	80029bc <xTaskResumeAll>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f af69 	bne.w	8002004 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <xQueueReceive+0x224>)
 8002134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	e75f      	b.n	8002004 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002146:	f000 f8b7 	bl	80022b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800214a:	f000 fc37 	bl	80029bc <xTaskResumeAll>
 800214e:	e759      	b.n	8002004 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002152:	f000 f8b1 	bl	80022b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002156:	f000 fc31 	bl	80029bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800215a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800215c:	f000 f8fe 	bl	800235c <prvIsQueueEmpty>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f43f af4e 	beq.w	8002004 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216a:	4618      	mov	r0, r3
 800216c:	f004 f890 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8002170:	4604      	mov	r4, r0
 8002172:	2000      	movs	r0, #0
 8002174:	f004 f88c 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2101      	movs	r1, #1
 800217e:	9100      	str	r1, [sp, #0]
 8002180:	4621      	mov	r1, r4
 8002182:	205c      	movs	r0, #92	@ 0x5c
 8002184:	f003 fb70 	bl	8005868 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800218a:	4618      	mov	r0, r3
 800218c:	3734      	adds	r7, #52	@ 0x34
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	e000ed04 	.word	0xe000ed04

08002198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d14d      	bne.n	800225a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 f80e 	bl	80031e4 <xTaskPriorityDisinherit>
 80021c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e043      	b.n	800225a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d119      	bne.n	800220c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6858      	ldr	r0, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	461a      	mov	r2, r3
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	f004 fb58 	bl	8006898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d32b      	bcc.n	800225a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e026      	b.n	800225a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68d8      	ldr	r0, [r3, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	461a      	mov	r2, r3
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	f004 fb3e 	bl	8006898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	425b      	negs	r3, r3
 8002226:	441a      	add	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	425b      	negs	r3, r3
 8002242:	441a      	add	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d105      	bne.n	800225a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3b01      	subs	r3, #1
 8002258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002262:	697b      	ldr	r3, [r7, #20]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	441a      	add	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d303      	bcc.n	80022a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68d9      	ldr	r1, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	461a      	mov	r2, r3
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f004 faf4 	bl	8006898 <memcpy>
	}
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022c0:	f001 fce2 	bl	8003c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022cc:	e011      	b.n	80022f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3324      	adds	r3, #36	@ 0x24
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fdb8 	bl	8002e50 <xTaskRemoveFromEventList>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022e6:	f000 fe95 	bl	8003014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	dce9      	bgt.n	80022ce <prvUnlockQueue+0x16>
 80022fa:	e000      	b.n	80022fe <prvUnlockQueue+0x46>
					break;
 80022fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	22ff      	movs	r2, #255	@ 0xff
 8002302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002306:	f001 fcf1 	bl	8003cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800230a:	f001 fcbd 	bl	8003c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002316:	e011      	b.n	800233c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d012      	beq.n	8002346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3310      	adds	r3, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd93 	bl	8002e50 <xTaskRemoveFromEventList>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002330:	f000 fe70 	bl	8003014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	3b01      	subs	r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800233c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002340:	2b00      	cmp	r3, #0
 8002342:	dce9      	bgt.n	8002318 <prvUnlockQueue+0x60>
 8002344:	e000      	b.n	8002348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	22ff      	movs	r2, #255	@ 0xff
 800234c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002350:	f001 fccc 	bl	8003cec <vPortExitCritical>
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002364:	f001 fc90 	bl	8003c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002370:	2301      	movs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e001      	b.n	800237a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800237a:	f001 fcb7 	bl	8003cec <vPortExitCritical>

	return xReturn;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002390:	f001 fc7a 	bl	8003c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	429a      	cmp	r2, r3
 800239e:	d102      	bne.n	80023a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e001      	b.n	80023aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023aa:	f001 fc9f 	bl	8003cec <vPortExitCritical>

	return xReturn;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e01e      	b.n	8002406 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023c8:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <vQueueAddToRegistry+0x60>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023d4:	4910      	ldr	r1, [pc, #64]	@ (8002418 <vQueueAddToRegistry+0x60>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80023de:	4a0e      	ldr	r2, [pc, #56]	@ (8002418 <vQueueAddToRegistry+0x60>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 ff4f 	bl	8006290 <SEGGER_SYSVIEW_ShrinkId>
 80023f2:	4601      	mov	r1, r0
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	2071      	movs	r0, #113	@ 0x71
 80023fa:	f003 f965 	bl	80056c8 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80023fe:	e006      	b.n	800240e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d9dd      	bls.n	80023c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200000dc 	.word	0x200000dc

0800241c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800242c:	f001 fc2c 	bl	8003c88 <vPortEnterCritical>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800243c:	d103      	bne.n	8002446 <vQueueWaitForMessageRestricted+0x2a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800244c:	b25b      	sxtb	r3, r3
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002452:	d103      	bne.n	800245c <vQueueWaitForMessageRestricted+0x40>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800245c:	f001 fc46 	bl	8003cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3324      	adds	r3, #36	@ 0x24
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fcbd 	bl	8002df0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff1e 	bl	80022b8 <prvUnlockQueue>
	}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af04      	add	r7, sp, #16
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 fd77 	bl	8003f8c <pvPortMalloc>
 800249e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00e      	beq.n	80024c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024a6:	20a0      	movs	r0, #160	@ 0xa0
 80024a8:	f001 fd70 	bl	8003f8c <pvPortMalloc>
 80024ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ba:	e005      	b.n	80024c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80024bc:	6978      	ldr	r0, [r7, #20]
 80024be:	f001 fe33 	bl	8004128 <vPortFree>
 80024c2:	e001      	b.n	80024c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d013      	beq.n	80024f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9303      	str	r3, [sp, #12]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f80f 	bl	8002508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ea:	69f8      	ldr	r0, [r7, #28]
 80024ec:	f000 f8ac 	bl	8002648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e002      	b.n	80024fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024fc:	69bb      	ldr	r3, [r7, #24]
	}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002520:	3b01      	subs	r3, #1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	617b      	str	r3, [r7, #20]
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	e7fd      	b.n	800254e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e012      	b.n	8002584 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	7819      	ldrb	r1, [r3, #0]
 8002566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	3334      	adds	r3, #52	@ 0x34
 800256e:	460a      	mov	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d9e9      	bls.n	800255e <prvInitialiseNewTask+0x56>
 800258a:	e000      	b.n	800258e <prvInitialiseNewTask+0x86>
			{
				break;
 800258c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002596:	e003      	b.n	80025a0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d901      	bls.n	80025aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025a6:	2306      	movs	r3, #6
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	2200      	movs	r2, #0
 80025ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	3304      	adds	r3, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f99f 	bl	8001904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	3318      	adds	r3, #24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f99a 	bl	8001904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	f1c3 0207 	rsb	r2, r3, #7
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	334c      	adds	r3, #76	@ 0x4c
 80025fa:	224c      	movs	r2, #76	@ 0x4c
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 f8bd 	bl	800677e <memset>
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <prvInitialiseNewTask+0x134>)
 8002608:	651a      	str	r2, [r3, #80]	@ 0x50
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <prvInitialiseNewTask+0x138>)
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <prvInitialiseNewTask+0x13c>)
 8002614:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	f001 fa02 	bl	8003a24 <pxPortInitialiseStack>
 8002620:	4602      	mov	r2, r0
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20006524 	.word	0x20006524
 8002640:	2000658c 	.word	0x2000658c
 8002644:	200065f4 	.word	0x200065f4

08002648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af02      	add	r7, sp, #8
 800264e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002650:	f001 fb1a 	bl	8003c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002654:	4b39      	ldr	r3, [pc, #228]	@ (800273c <prvAddNewTaskToReadyList+0xf4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a38      	ldr	r2, [pc, #224]	@ (800273c <prvAddNewTaskToReadyList+0xf4>)
 800265c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800265e:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <prvAddNewTaskToReadyList+0xf8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002666:	4a36      	ldr	r2, [pc, #216]	@ (8002740 <prvAddNewTaskToReadyList+0xf8>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800266c:	4b33      	ldr	r3, [pc, #204]	@ (800273c <prvAddNewTaskToReadyList+0xf4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d110      	bne.n	8002696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002674:	f000 fcf4 	bl	8003060 <prvInitialiseTaskLists>
 8002678:	e00d      	b.n	8002696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800267a:	4b32      	ldr	r3, [pc, #200]	@ (8002744 <prvAddNewTaskToReadyList+0xfc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <prvAddNewTaskToReadyList+0xf8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	d802      	bhi.n	8002696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002690:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <prvAddNewTaskToReadyList+0xf8>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002696:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <prvAddNewTaskToReadyList+0x100>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	4a2a      	ldr	r2, [pc, #168]	@ (8002748 <prvAddNewTaskToReadyList+0x100>)
 800269e:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <prvAddNewTaskToReadyList+0x8c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fccb 	bl	8006044 <SEGGER_SYSVIEW_OnTaskCreate>
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	461d      	mov	r5, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461c      	mov	r4, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	1ae3      	subs	r3, r4, r3
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	462b      	mov	r3, r5
 80026d0:	f003 ffbc 	bl	800664c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fd38 	bl	800614c <SEGGER_SYSVIEW_OnTaskStartReady>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	2201      	movs	r2, #1
 80026e2:	409a      	lsls	r2, r3
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <prvAddNewTaskToReadyList+0x104>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	4a18      	ldr	r2, [pc, #96]	@ (800274c <prvAddNewTaskToReadyList+0x104>)
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <prvAddNewTaskToReadyList+0x108>)
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4610      	mov	r0, r2
 8002706:	f7ff f90a 	bl	800191e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800270a:	f001 faef 	bl	8003cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800270e:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <prvAddNewTaskToReadyList+0xfc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00e      	beq.n	8002734 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <prvAddNewTaskToReadyList+0xf8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <prvAddNewTaskToReadyList+0x10c>)
 8002726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bdb0      	pop	{r4, r5, r7, pc}
 800273c:	2000021c 	.word	0x2000021c
 8002740:	2000011c 	.word	0x2000011c
 8002744:	20000228 	.word	0x20000228
 8002748:	20000238 	.word	0x20000238
 800274c:	20000224 	.word	0x20000224
 8002750:	20000120 	.word	0x20000120
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	@ 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <vTaskDelayUntil+0x2c>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	617b      	str	r3, [r7, #20]
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10b      	bne.n	80027a2 <vTaskDelayUntil+0x4a>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	613b      	str	r3, [r7, #16]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80027a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002854 <vTaskDelayUntil+0xfc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <vTaskDelayUntil+0x6a>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	60fb      	str	r3, [r7, #12]
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	e7fd      	b.n	80027be <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80027c2:	f000 f8ed 	bl	80029a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80027c6:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <vTaskDelayUntil+0x100>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a3a      	ldr	r2, [r7, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d20b      	bcs.n	80027f8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d211      	bcs.n	800280e <vTaskDelayUntil+0xb6>
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90d      	bls.n	800280e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	e00a      	b.n	800280e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d303      	bcc.n	800280a <vTaskDelayUntil+0xb2>
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	d901      	bls.n	800280e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800280a:	2301      	movs	r3, #1
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800281a:	2024      	movs	r0, #36	@ 0x24
 800281c:	f002 fefa 	bl	8005614 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd67 	bl	80032fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800282e:	f000 f8c5 	bl	80029bc <xTaskResumeAll>
 8002832:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <vTaskDelayUntil+0x104>)
 800283c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	@ 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000244 	.word	0x20000244
 8002858:	20000220 	.word	0x20000220
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01c      	beq.n	80028ac <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <vTaskDelay+0x6c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <vTaskDelay+0x32>
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	60bb      	str	r3, [r7, #8]
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	e7fd      	b.n	800288e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002892:	f000 f885 	bl	80029a0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	2023      	movs	r0, #35	@ 0x23
 800289a:	f002 fed9 	bl	8005650 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800289e:	2100      	movs	r1, #0
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fd2b 	bl	80032fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028a6:	f000 f889 	bl	80029bc <xTaskResumeAll>
 80028aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <vTaskDelay+0x70>)
 80028b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000244 	.word	0x20000244
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <vTaskStartScheduler+0xac>)
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	4927      	ldr	r1, [pc, #156]	@ (8002984 <vTaskStartScheduler+0xb0>)
 80028e8:	4827      	ldr	r0, [pc, #156]	@ (8002988 <vTaskStartScheduler+0xb4>)
 80028ea:	f7ff fdcb 	bl	8002484 <xTaskCreate>
 80028ee:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80028f6:	f000 fd79 	bl	80033ec <xTimerCreateTimerTask>
 80028fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d129      	bne.n	8002956 <vTaskStartScheduler+0x82>
	__asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	60bb      	str	r3, [r7, #8]
}
 8002914:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <vTaskStartScheduler+0xb8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	334c      	adds	r3, #76	@ 0x4c
 800291c:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <vTaskStartScheduler+0xbc>)
 800291e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002920:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <vTaskStartScheduler+0xc0>)
 8002922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002926:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <vTaskStartScheduler+0xc4>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <vTaskStartScheduler+0xc8>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8002934:	4b15      	ldr	r3, [pc, #84]	@ (800298c <vTaskStartScheduler+0xb8>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <vTaskStartScheduler+0xac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d102      	bne.n	8002946 <vTaskStartScheduler+0x72>
 8002940:	f003 fb64 	bl	800600c <SEGGER_SYSVIEW_OnIdle>
 8002944:	e004      	b.n	8002950 <vTaskStartScheduler+0x7c>
 8002946:	4b11      	ldr	r3, [pc, #68]	@ (800298c <vTaskStartScheduler+0xb8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fbbc 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002950:	f001 f8f6 	bl	8003b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002954:	e00f      	b.n	8002976 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800295c:	d10b      	bne.n	8002976 <vTaskStartScheduler+0xa2>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	607b      	str	r3, [r7, #4]
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <vTaskStartScheduler+0x9e>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000240 	.word	0x20000240
 8002984:	08006a8c 	.word	0x08006a8c
 8002988:	0800302d 	.word	0x0800302d
 800298c:	2000011c 	.word	0x2000011c
 8002990:	20000010 	.word	0x20000010
 8002994:	2000023c 	.word	0x2000023c
 8002998:	20000228 	.word	0x20000228
 800299c:	20000220 	.word	0x20000220

080029a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <vTaskSuspendAll+0x18>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a03      	ldr	r2, [pc, #12]	@ (80029b8 <vTaskSuspendAll+0x18>)
 80029ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	20000244 	.word	0x20000244

080029bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029ca:	4b44      	ldr	r3, [pc, #272]	@ (8002adc <xTaskResumeAll+0x120>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <xTaskResumeAll+0x2e>
	__asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	603b      	str	r3, [r7, #0]
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029ea:	f001 f94d 	bl	8003c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <xTaskResumeAll+0x120>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	4a39      	ldr	r2, [pc, #228]	@ (8002adc <xTaskResumeAll+0x120>)
 80029f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029f8:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <xTaskResumeAll+0x120>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d165      	bne.n	8002acc <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a00:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <xTaskResumeAll+0x124>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d061      	beq.n	8002acc <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a08:	e032      	b.n	8002a70 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <xTaskResumeAll+0x128>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3318      	adds	r3, #24
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe ffde 	bl	80019d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe ffd9 	bl	80019d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 fb8f 	bl	800614c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	2201      	movs	r2, #1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <xTaskResumeAll+0x12c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <xTaskResumeAll+0x12c>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <xTaskResumeAll+0x130>)
 8002a4e:	441a      	add	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7fe ff61 	bl	800191e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a60:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <xTaskResumeAll+0x134>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <xTaskResumeAll+0x138>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae4 <xTaskResumeAll+0x128>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1c8      	bne.n	8002a0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a7e:	f000 fb73 	bl	8003168 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a82:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <xTaskResumeAll+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a8e:	f000 f859 	bl	8002b44 <xTaskIncrementTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8002a98:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <xTaskResumeAll+0x138>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f1      	bne.n	8002a8e <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <xTaskResumeAll+0x13c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ab0:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <xTaskResumeAll+0x138>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002abc:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <xTaskResumeAll+0x140>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002acc:	f001 f90e 	bl	8003cec <vPortExitCritical>

	return xAlreadyYielded;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000244 	.word	0x20000244
 8002ae0:	2000021c 	.word	0x2000021c
 8002ae4:	200001dc 	.word	0x200001dc
 8002ae8:	20000224 	.word	0x20000224
 8002aec:	20000120 	.word	0x20000120
 8002af0:	2000011c 	.word	0x2000011c
 8002af4:	20000230 	.word	0x20000230
 8002af8:	2000022c 	.word	0x2000022c
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <xTaskGetTickCount+0x1c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000220 	.word	0x20000220

08002b20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b26:	f001 f997 	bl	8003e58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002b2e:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <xTaskGetTickCountFromISR+0x20>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b34:	683b      	ldr	r3, [r7, #0]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000220 	.word	0x20000220

08002b44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4e:	4b51      	ldr	r3, [pc, #324]	@ (8002c94 <xTaskIncrementTick+0x150>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 8093 	bne.w	8002c7e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b58:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <xTaskIncrementTick+0x154>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b60:	4a4d      	ldr	r2, [pc, #308]	@ (8002c98 <xTaskIncrementTick+0x154>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d121      	bne.n	8002bb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <xTaskIncrementTick+0x158>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	603b      	str	r3, [r7, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	e7fd      	b.n	8002b8a <xTaskIncrementTick+0x46>
 8002b8e:	4b43      	ldr	r3, [pc, #268]	@ (8002c9c <xTaskIncrementTick+0x158>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <xTaskIncrementTick+0x15c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a40      	ldr	r2, [pc, #256]	@ (8002c9c <xTaskIncrementTick+0x158>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <xTaskIncrementTick+0x15c>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <xTaskIncrementTick+0x160>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca4 <xTaskIncrementTick+0x160>)
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	f000 fadc 	bl	8003168 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <xTaskIncrementTick+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d34c      	bcc.n	8002c54 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <xTaskIncrementTick+0x158>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <xTaskIncrementTick+0x164>)
 8002bc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bca:	601a      	str	r2, [r3, #0]
					break;
 8002bcc:	e042      	b.n	8002c54 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bce:	4b33      	ldr	r3, [pc, #204]	@ (8002c9c <xTaskIncrementTick+0x158>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d203      	bcs.n	8002bee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <xTaskIncrementTick+0x164>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002bec:	e032      	b.n	8002c54 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fef0 	bl	80019d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3318      	adds	r3, #24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fee7 	bl	80019d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fa9d 	bl	800614c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	2201      	movs	r2, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <xTaskIncrementTick+0x168>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <xTaskIncrementTick+0x168>)
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <xTaskIncrementTick+0x16c>)
 8002c32:	441a      	add	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7fe fe6f 	bl	800191e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <xTaskIncrementTick+0x170>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3b5      	bcc.n	8002bba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c52:	e7b2      	b.n	8002bba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <xTaskIncrementTick+0x170>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5a:	4915      	ldr	r1, [pc, #84]	@ (8002cb0 <xTaskIncrementTick+0x16c>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d901      	bls.n	8002c70 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <xTaskIncrementTick+0x174>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e004      	b.n	8002c88 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <xTaskIncrementTick+0x178>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <xTaskIncrementTick+0x178>)
 8002c86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c88:	697b      	ldr	r3, [r7, #20]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000244 	.word	0x20000244
 8002c98:	20000220 	.word	0x20000220
 8002c9c:	200001d4 	.word	0x200001d4
 8002ca0:	200001d8 	.word	0x200001d8
 8002ca4:	20000234 	.word	0x20000234
 8002ca8:	2000023c 	.word	0x2000023c
 8002cac:	20000224 	.word	0x20000224
 8002cb0:	20000120 	.word	0x20000120
 8002cb4:	2000011c 	.word	0x2000011c
 8002cb8:	20000230 	.word	0x20000230
 8002cbc:	2000022c 	.word	0x2000022c

08002cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <vTaskSwitchContext+0xc8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <vTaskSwitchContext+0xcc>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cd4:	e053      	b.n	8002d7e <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <vTaskSwitchContext+0xcc>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <vTaskSwitchContext+0xd0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f1c3 031f 	rsb	r3, r3, #31
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4928      	ldr	r1, [pc, #160]	@ (8002d94 <vTaskSwitchContext+0xd4>)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	607b      	str	r3, [r7, #4]
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	e7fd      	b.n	8002d1a <vTaskSwitchContext+0x5a>
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4a1a      	ldr	r2, [pc, #104]	@ (8002d94 <vTaskSwitchContext+0xd4>)
 8002d2a:	4413      	add	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d104      	bne.n	8002d4e <vTaskSwitchContext+0x8e>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <vTaskSwitchContext+0xd8>)
 8002d56:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <vTaskSwitchContext+0xd8>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <vTaskSwitchContext+0xdc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d102      	bne.n	8002d6a <vTaskSwitchContext+0xaa>
 8002d64:	f003 f952 	bl	800600c <SEGGER_SYSVIEW_OnIdle>
 8002d68:	e004      	b.n	8002d74 <vTaskSwitchContext+0xb4>
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <vTaskSwitchContext+0xd8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 f9aa 	bl	80060c8 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <vTaskSwitchContext+0xd8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	334c      	adds	r3, #76	@ 0x4c
 8002d7a:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <vTaskSwitchContext+0xe0>)
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000244 	.word	0x20000244
 8002d8c:	20000230 	.word	0x20000230
 8002d90:	20000224 	.word	0x20000224
 8002d94:	20000120 	.word	0x20000120
 8002d98:	2000011c 	.word	0x2000011c
 8002d9c:	20000240 	.word	0x20000240
 8002da0:	20000010 	.word	0x20000010

08002da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	60fb      	str	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <vTaskPlaceOnEventList+0x48>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fdc6 	bl	8001966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dda:	2101      	movs	r1, #1
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f000 fa8d 	bl	80032fc <prvAddCurrentTaskToDelayedList>
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000011c 	.word	0x2000011c

08002df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	617b      	str	r3, [r7, #20]
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	e7fd      	b.n	8002e16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <vTaskPlaceOnEventListRestricted+0x5c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7fe fd7b 	bl	800191e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002e34:	2024      	movs	r0, #36	@ 0x24
 8002e36:	f002 fbed 	bl	8005614 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	f000 fa5d 	bl	80032fc <prvAddCurrentTaskToDelayedList>
	}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000011c 	.word	0x2000011c

08002e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60fb      	str	r3, [r7, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	e7fd      	b.n	8002e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3318      	adds	r3, #24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fda8 	bl	80019d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <xTaskRemoveFromEventList+0xb8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d120      	bne.n	8002ed2 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fd9f 	bl	80019d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 f955 	bl	800614c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <xTaskRemoveFromEventList+0xbc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	4a16      	ldr	r2, [pc, #88]	@ (8002f0c <xTaskRemoveFromEventList+0xbc>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a13      	ldr	r2, [pc, #76]	@ (8002f10 <xTaskRemoveFromEventList+0xc0>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fe fd27 	bl	800191e <vListInsertEnd>
 8002ed0:	e005      	b.n	8002ede <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480e      	ldr	r0, [pc, #56]	@ (8002f14 <xTaskRemoveFromEventList+0xc4>)
 8002eda:	f7fe fd20 	bl	800191e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <xTaskRemoveFromEventList+0xc8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d905      	bls.n	8002ef8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <xTaskRemoveFromEventList+0xcc>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e001      	b.n	8002efc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002efc:	697b      	ldr	r3, [r7, #20]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000244 	.word	0x20000244
 8002f0c:	20000224 	.word	0x20000224
 8002f10:	20000120 	.word	0x20000120
 8002f14:	200001dc 	.word	0x200001dc
 8002f18:	2000011c 	.word	0x2000011c
 8002f1c:	20000230 	.word	0x20000230

08002f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <vTaskInternalSetTimeOutState+0x24>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <vTaskInternalSetTimeOutState+0x28>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	605a      	str	r2, [r3, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20000234 	.word	0x20000234
 8002f48:	20000220 	.word	0x20000220

08002f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	613b      	str	r3, [r7, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60fb      	str	r3, [r7, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002f92:	f000 fe79 	bl	8003c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <xTaskCheckForTimeOut+0xc0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fae:	d102      	bne.n	8002fb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e023      	b.n	8002ffe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <xTaskCheckForTimeOut+0xc4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d007      	beq.n	8002fd2 <xTaskCheckForTimeOut+0x86>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e015      	b.n	8002ffe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d20b      	bcs.n	8002ff4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff99 	bl	8002f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e004      	b.n	8002ffe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ffe:	f000 fe75 	bl	8003cec <vPortExitCritical>

	return xReturn;
 8003002:	69fb      	ldr	r3, [r7, #28]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000220 	.word	0x20000220
 8003010:	20000234 	.word	0x20000234

08003014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <vTaskMissedYield+0x14>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000230 	.word	0x20000230

0800302c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003034:	f000 f854 	bl	80030e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <prvIdleTask+0x2c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d907      	bls.n	8003050 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <prvIdleTask+0x30>)
 8003042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003050:	f7fd fa30 	bl	80004b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003054:	e7ee      	b.n	8003034 <prvIdleTask+0x8>
 8003056:	bf00      	nop
 8003058:	20000120 	.word	0x20000120
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	e00c      	b.n	8003086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <prvInitialiseTaskLists+0x60>)
 8003078:	4413      	add	r3, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fc22 	bl	80018c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3301      	adds	r3, #1
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b06      	cmp	r3, #6
 800308a:	d9ef      	bls.n	800306c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800308c:	480d      	ldr	r0, [pc, #52]	@ (80030c4 <prvInitialiseTaskLists+0x64>)
 800308e:	f7fe fc19 	bl	80018c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003092:	480d      	ldr	r0, [pc, #52]	@ (80030c8 <prvInitialiseTaskLists+0x68>)
 8003094:	f7fe fc16 	bl	80018c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003098:	480c      	ldr	r0, [pc, #48]	@ (80030cc <prvInitialiseTaskLists+0x6c>)
 800309a:	f7fe fc13 	bl	80018c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800309e:	480c      	ldr	r0, [pc, #48]	@ (80030d0 <prvInitialiseTaskLists+0x70>)
 80030a0:	f7fe fc10 	bl	80018c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030a4:	480b      	ldr	r0, [pc, #44]	@ (80030d4 <prvInitialiseTaskLists+0x74>)
 80030a6:	f7fe fc0d 	bl	80018c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <prvInitialiseTaskLists+0x78>)
 80030ac:	4a05      	ldr	r2, [pc, #20]	@ (80030c4 <prvInitialiseTaskLists+0x64>)
 80030ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <prvInitialiseTaskLists+0x7c>)
 80030b2:	4a05      	ldr	r2, [pc, #20]	@ (80030c8 <prvInitialiseTaskLists+0x68>)
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000120 	.word	0x20000120
 80030c4:	200001ac 	.word	0x200001ac
 80030c8:	200001c0 	.word	0x200001c0
 80030cc:	200001dc 	.word	0x200001dc
 80030d0:	200001f0 	.word	0x200001f0
 80030d4:	20000208 	.word	0x20000208
 80030d8:	200001d4 	.word	0x200001d4
 80030dc:	200001d8 	.word	0x200001d8

080030e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030e6:	e019      	b.n	800311c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030e8:	f000 fdce 	bl	8003c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <prvCheckTasksWaitingTermination+0x50>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fc6d 	bl	80019d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <prvCheckTasksWaitingTermination+0x54>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <prvCheckTasksWaitingTermination+0x54>)
 8003106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <prvCheckTasksWaitingTermination+0x58>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <prvCheckTasksWaitingTermination+0x58>)
 8003110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003112:	f000 fdeb 	bl	8003cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f810 	bl	800313c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <prvCheckTasksWaitingTermination+0x58>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e1      	bne.n	80030e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200001f0 	.word	0x200001f0
 8003134:	2000021c 	.word	0x2000021c
 8003138:	20000204 	.word	0x20000204

0800313c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	334c      	adds	r3, #76	@ 0x4c
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fb47 	bl	80067dc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffe8 	bl	8004128 <vPortFree>
			vPortFree( pxTCB );
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 ffe5 	bl	8004128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800316e:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <prvResetNextTaskUnblockTime+0x38>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <prvResetNextTaskUnblockTime+0x3c>)
 800317a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800317e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003180:	e008      	b.n	8003194 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <prvResetNextTaskUnblockTime+0x38>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <prvResetNextTaskUnblockTime+0x3c>)
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	200001d4 	.word	0x200001d4
 80031a4:	2000023c 	.word	0x2000023c

080031a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031ae:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <xTaskGetSchedulerState+0x34>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031b6:	2301      	movs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e008      	b.n	80031ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <xTaskGetSchedulerState+0x38>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80031c4:	2302      	movs	r3, #2
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80031ce:	687b      	ldr	r3, [r7, #4]
	}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	20000228 	.word	0x20000228
 80031e0:	20000244 	.word	0x20000244

080031e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d075      	beq.n	80032e6 <xTaskPriorityDisinherit+0x102>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031fa:	4b3d      	ldr	r3, [pc, #244]	@ (80032f0 <xTaskPriorityDisinherit+0x10c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d00b      	beq.n	800321c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60fb      	str	r3, [r7, #12]
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	60bb      	str	r3, [r7, #8]
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	429a      	cmp	r2, r3
 8003250:	d049      	beq.n	80032e6 <xTaskPriorityDisinherit+0x102>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	d145      	bne.n	80032e6 <xTaskPriorityDisinherit+0x102>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3304      	adds	r3, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fbba 	bl	80019d8 <uxListRemove>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d115      	bne.n	8003296 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326e:	4921      	ldr	r1, [pc, #132]	@ (80032f4 <xTaskPriorityDisinherit+0x110>)
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xTaskPriorityDisinherit+0xb2>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	2201      	movs	r2, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <xTaskPriorityDisinherit+0x114>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4013      	ands	r3, r2
 8003292:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <xTaskPriorityDisinherit+0x114>)
 8003294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	204a      	movs	r0, #74	@ 0x4a
 800329c:	f002 f9d8 	bl	8005650 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f1c3 0207 	rsb	r2, r3, #7
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <xTaskPriorityDisinherit+0x114>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4a0d      	ldr	r2, [pc, #52]	@ (80032f8 <xTaskPriorityDisinherit+0x114>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <xTaskPriorityDisinherit+0x110>)
 80032d4:	441a      	add	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7fe fb1e 	bl	800191e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80032e6:	697b      	ldr	r3, [r7, #20]
	}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000011c 	.word	0x2000011c
 80032f4:	20000120 	.word	0x20000120
 80032f8:	20000224 	.word	0x20000224

080032fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003306:	4b32      	ldr	r3, [pc, #200]	@ (80033d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800330c:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fb60 	bl	80019d8 <uxListRemove>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800331e:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	2201      	movs	r2, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4013      	ands	r3, r2
 8003332:	4a29      	ldr	r2, [pc, #164]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800333c:	d110      	bne.n	8003360 <prvAddCurrentTaskToDelayedList+0x64>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003344:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	211b      	movs	r1, #27
 800334a:	4618      	mov	r0, r3
 800334c:	f002 ff40 	bl	80061d0 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003350:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4820      	ldr	r0, [pc, #128]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xe0>)
 800335a:	f7fe fae0 	bl	800191e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800335e:	e032      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003368:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d20f      	bcs.n	8003398 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003378:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2104      	movs	r1, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f002 ff26 	bl	80061d0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003384:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7fe fae8 	bl	8001966 <vListInsert>
}
 8003396:	e016      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003398:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2104      	movs	r1, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 ff16 	bl	80061d0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b0a      	ldr	r3, [pc, #40]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7fe fad8 	bl	8001966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d202      	bcs.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80033c0:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000220 	.word	0x20000220
 80033d4:	2000011c 	.word	0x2000011c
 80033d8:	20000224 	.word	0x20000224
 80033dc:	20000208 	.word	0x20000208
 80033e0:	200001d8 	.word	0x200001d8
 80033e4:	200001d4 	.word	0x200001d4
 80033e8:	2000023c 	.word	0x2000023c

080033ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033f6:	f000 fadf 	bl	80039b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033fa:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <xTimerCreateTimerTask+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <xTimerCreateTimerTask+0x58>)
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2303      	movs	r3, #3
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	2280      	movs	r2, #128	@ 0x80
 800340e:	490e      	ldr	r1, [pc, #56]	@ (8003448 <xTimerCreateTimerTask+0x5c>)
 8003410:	480e      	ldr	r0, [pc, #56]	@ (800344c <xTimerCreateTimerTask+0x60>)
 8003412:	f7ff f837 	bl	8002484 <xTaskCreate>
 8003416:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	603b      	str	r3, [r7, #0]
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003436:	687b      	ldr	r3, [r7, #4]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000278 	.word	0x20000278
 8003444:	2000027c 	.word	0x2000027c
 8003448:	08006a94 	.word	0x08006a94
 800344c:	08003589 	.word	0x08003589

08003450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <xTimerGenericCommand+0x30>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	623b      	str	r3, [r7, #32]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <xTimerGenericCommand+0x98>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02a      	beq.n	80034de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	dc18      	bgt.n	80034cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800349a:	f7ff fe85 	bl	80031a8 <xTaskGetSchedulerState>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d109      	bne.n	80034b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <xTimerGenericCommand+0x98>)
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	f107 0114 	add.w	r1, r7, #20
 80034ac:	2300      	movs	r3, #0
 80034ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b0:	f7fe fb82 	bl	8001bb8 <xQueueGenericSend>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80034b6:	e012      	b.n	80034de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034b8:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <xTimerGenericCommand+0x98>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f107 0114 	add.w	r1, r7, #20
 80034c0:	2300      	movs	r3, #0
 80034c2:	2200      	movs	r2, #0
 80034c4:	f7fe fb78 	bl	8001bb8 <xQueueGenericSend>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80034ca:	e008      	b.n	80034de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034cc:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <xTimerGenericCommand+0x98>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	f107 0114 	add.w	r1, r7, #20
 80034d4:	2300      	movs	r3, #0
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	f7fe fc98 	bl	8001e0c <xQueueGenericSendFromISR>
 80034dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	@ 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000278 	.word	0x20000278

080034ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f6:	4b23      	ldr	r3, [pc, #140]	@ (8003584 <prvProcessExpiredTimer+0x98>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fa67 	bl	80019d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	18d1      	adds	r1, r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6978      	ldr	r0, [r7, #20]
 8003526:	f000 f8d5 	bl	80036d4 <prvInsertTimerInActiveList>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	2100      	movs	r1, #0
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff88 	bl	8003450 <xTimerGenericCommand>
 8003540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d114      	bne.n	8003572 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	60fb      	str	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	4798      	blx	r3
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000270 	.word	0x20000270

08003588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f859 	bl	800364c <prvGetNextExpireTime>
 800359a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4619      	mov	r1, r3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f805 	bl	80035b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035a6:	f000 f8d7 	bl	8003758 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035aa:	bf00      	nop
 80035ac:	e7f0      	b.n	8003590 <prvTimerTask+0x8>
	...

080035b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035ba:	f7ff f9f1 	bl	80029a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f866 	bl	8003694 <prvSampleTimeNow>
 80035c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d130      	bne.n	8003632 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <prvProcessTimerOrBlockTask+0x3c>
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035de:	f7ff f9ed 	bl	80029bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff81 	bl	80034ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035ea:	e024      	b.n	8003636 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <prvProcessTimerOrBlockTask+0x90>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <prvProcessTimerOrBlockTask+0x50>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <prvProcessTimerOrBlockTask+0x52>
 8003600:	2300      	movs	r3, #0
 8003602:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003604:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <prvProcessTimerOrBlockTask+0x94>)
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4619      	mov	r1, r3
 8003612:	f7fe ff03 	bl	800241c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003616:	f7ff f9d1 	bl	80029bc <xTaskResumeAll>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003620:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <prvProcessTimerOrBlockTask+0x98>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
}
 8003630:	e001      	b.n	8003636 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003632:	f7ff f9c3 	bl	80029bc <xTaskResumeAll>
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000274 	.word	0x20000274
 8003644:	20000278 	.word	0x20000278
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003654:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <prvGetNextExpireTime+0x44>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <prvGetNextExpireTime+0x16>
 800365e:	2201      	movs	r2, #1
 8003660:	e000      	b.n	8003664 <prvGetNextExpireTime+0x18>
 8003662:	2200      	movs	r2, #0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <prvGetNextExpireTime+0x44>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e001      	b.n	8003680 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000270 	.word	0x20000270

08003694 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800369c:	f7ff fa30 	bl	8002b00 <xTaskGetTickCount>
 80036a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036a2:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <prvSampleTimeNow+0x3c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d205      	bcs.n	80036b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036ac:	f000 f91e 	bl	80038ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e002      	b.n	80036be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036be:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <prvSampleTimeNow+0x3c>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036c4:	68fb      	ldr	r3, [r7, #12]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000280 	.word	0x20000280

080036d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d812      	bhi.n	8003720 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad2      	subs	r2, r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e01b      	b.n	8003746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <prvInsertTimerInActiveList+0x7c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f7fe f924 	bl	8001966 <vListInsert>
 800371e:	e012      	b.n	8003746 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d206      	bcs.n	8003736 <prvInsertTimerInActiveList+0x62>
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e007      	b.n	8003746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <prvInsertTimerInActiveList+0x80>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fe f910 	bl	8001966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000274 	.word	0x20000274
 8003754:	20000270 	.word	0x20000270

08003758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	@ 0x30
 800375c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800375e:	e0b2      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f2c0 80af 	blt.w	80038c6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	3304      	adds	r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f92d 	bl	80019d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff87 	bl	8003694 <prvSampleTimeNow>
 8003786:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b09      	cmp	r3, #9
 800378c:	f200 8098 	bhi.w	80038c0 <prvProcessReceivedCommands+0x168>
 8003790:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <prvProcessReceivedCommands+0x40>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037c1 	.word	0x080037c1
 80037a4:	08003837 	.word	0x08003837
 80037a8:	0800384b 	.word	0x0800384b
 80037ac:	08003897 	.word	0x08003897
 80037b0:	080037c1 	.word	0x080037c1
 80037b4:	080037c1 	.word	0x080037c1
 80037b8:	08003837 	.word	0x08003837
 80037bc:	0800384b 	.word	0x0800384b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	18d1      	adds	r1, r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037e0:	f7ff ff78 	bl	80036d4 <prvInsertTimerInActiveList>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d06c      	beq.n	80038c4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d061      	beq.n	80038c4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	441a      	add	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	2100      	movs	r1, #0
 8003810:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003812:	f7ff fe1d 	bl	8003450 <xTimerGenericCommand>
 8003816:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d152      	bne.n	80038c4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	61bb      	str	r3, [r7, #24]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003848:	e03d      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	617b      	str	r3, [r7, #20]
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	e7fd      	b.n	800387e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	18d1      	adds	r1, r2, r3
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003890:	f7ff ff20 	bl	80036d4 <prvInsertTimerInActiveList>
					break;
 8003894:	e017      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80038a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038a6:	f000 fc3f 	bl	8004128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80038aa:	e00c      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80038be:	e002      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <prvProcessReceivedCommands+0x16e>
					break;
 80038c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038c6:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <prvProcessReceivedCommands+0x190>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f107 0108 	add.w	r1, r7, #8
 80038ce:	2200      	movs	r2, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fb4d 	bl	8001f70 <xQueueReceive>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f af41 	bne.w	8003760 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	@ 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000278 	.word	0x20000278

080038ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038f2:	e049      	b.n	8003988 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038f4:	4b2e      	ldr	r3, [pc, #184]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fe:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f863 	bl	80019d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02f      	beq.n	8003988 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d90e      	bls.n	8003958 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe f808 	bl	8001966 <vListInsert>
 8003956:	e017      	b.n	8003988 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003958:	2300      	movs	r3, #0
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	2100      	movs	r1, #0
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fd74 	bl	8003450 <xTimerGenericCommand>
 8003968:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	603b      	str	r3, [r7, #0]
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1b0      	bne.n	80038f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <prvSwitchTimerLists+0xc8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <prvSwitchTimerLists+0xc4>)
 800399e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <prvSwitchTimerLists+0xc8>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	6013      	str	r3, [r2, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000270 	.word	0x20000270
 80039b4:	20000274 	.word	0x20000274

080039b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80039bc:	f000 f964 	bl	8003c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <prvCheckForValidListAndQueue+0x54>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11d      	bne.n	8003a04 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80039c8:	4811      	ldr	r0, [pc, #68]	@ (8003a10 <prvCheckForValidListAndQueue+0x58>)
 80039ca:	f7fd ff7b 	bl	80018c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80039ce:	4811      	ldr	r0, [pc, #68]	@ (8003a14 <prvCheckForValidListAndQueue+0x5c>)
 80039d0:	f7fd ff78 	bl	80018c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80039d4:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <prvCheckForValidListAndQueue+0x60>)
 80039d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <prvCheckForValidListAndQueue+0x58>)
 80039d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <prvCheckForValidListAndQueue+0x64>)
 80039dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a14 <prvCheckForValidListAndQueue+0x5c>)
 80039de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80039e0:	2200      	movs	r2, #0
 80039e2:	210c      	movs	r1, #12
 80039e4:	200a      	movs	r0, #10
 80039e6:	f7fe f88b 	bl	8001b00 <xQueueGenericCreate>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a07      	ldr	r2, [pc, #28]	@ (8003a0c <prvCheckForValidListAndQueue+0x54>)
 80039ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <prvCheckForValidListAndQueue+0x54>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <prvCheckForValidListAndQueue+0x54>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4908      	ldr	r1, [pc, #32]	@ (8003a20 <prvCheckForValidListAndQueue+0x68>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fcda 	bl	80023b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a04:	f000 f972 	bl	8003cec <vPortExitCritical>
}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000278 	.word	0x20000278
 8003a10:	20000248 	.word	0x20000248
 8003a14:	2000025c 	.word	0x2000025c
 8003a18:	20000270 	.word	0x20000270
 8003a1c:	20000274 	.word	0x20000274
 8003a20:	08006a9c 	.word	0x08006a9c

08003a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3b04      	subs	r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b04      	subs	r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b04      	subs	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a54:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <pxPortInitialiseStack+0x64>)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b14      	subs	r3, #20
 8003a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b04      	subs	r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f06f 0202 	mvn.w	r2, #2
 8003a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3b20      	subs	r3, #32
 8003a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	08003a8d 	.word	0x08003a8d

08003a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <prvTaskExitError+0x58>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9e:	d00b      	beq.n	8003ab8 <prvTaskExitError+0x2c>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <prvTaskExitError+0x28>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	60bb      	str	r3, [r7, #8]
}
 8003aca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003acc:	bf00      	nop
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0fc      	beq.n	8003ace <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000000c 	.word	0x2000000c
	...

08003af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <pxCurrentTCBConst2>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	f380 8809 	msr	PSP, r0
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	4770      	bx	lr
 8003b0c:	f3af 8000 	nop.w

08003b10 <pxCurrentTCBConst2>:
 8003b10:	2000011c 	.word	0x2000011c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b18:	4808      	ldr	r0, [pc, #32]	@ (8003b3c <prvPortStartFirstTask+0x24>)
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f380 8808 	msr	MSP, r0
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8814 	msr	CONTROL, r0
 8003b2a:	b662      	cpsie	i
 8003b2c:	b661      	cpsie	f
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	df00      	svc	0
 8003b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b3a:	bf00      	nop
 8003b3c:	e000ed08 	.word	0xe000ed08

08003b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b46:	4b47      	ldr	r3, [pc, #284]	@ (8003c64 <xPortStartScheduler+0x124>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <xPortStartScheduler+0x128>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10b      	bne.n	8003b68 <xPortStartScheduler+0x28>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b68:	4b3e      	ldr	r3, [pc, #248]	@ (8003c64 <xPortStartScheduler+0x124>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c6c <xPortStartScheduler+0x12c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10b      	bne.n	8003b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	613b      	str	r3, [r7, #16]
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	e7fd      	b.n	8003b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b8a:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <xPortStartScheduler+0x130>)
 8003b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	22ff      	movs	r2, #255	@ 0xff
 8003b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b31      	ldr	r3, [pc, #196]	@ (8003c74 <xPortStartScheduler+0x134>)
 8003bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bb2:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bb8:	e009      	b.n	8003bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003bba:	4b2f      	ldr	r3, [pc, #188]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d0ef      	beq.n	8003bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bda:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d00b      	beq.n	8003bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	60bb      	str	r3, [r7, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	4a1c      	ldr	r2, [pc, #112]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c10:	4a19      	ldr	r2, [pc, #100]	@ (8003c78 <xPortStartScheduler+0x138>)
 8003c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c1c:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <xPortStartScheduler+0x13c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <xPortStartScheduler+0x13c>)
 8003c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <xPortStartScheduler+0x13c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	@ (8003c7c <xPortStartScheduler+0x13c>)
 8003c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c34:	f000 f8e2 	bl	8003dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <xPortStartScheduler+0x140>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c3e:	f000 f901 	bl	8003e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <xPortStartScheduler+0x144>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	@ (8003c84 <xPortStartScheduler+0x144>)
 8003c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c4e:	f7ff ff63 	bl	8003b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c52:	f7ff f835 	bl	8002cc0 <vTaskSwitchContext>
	prvTaskExitError();
 8003c56:	f7ff ff19 	bl	8003a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	410fc271 	.word	0x410fc271
 8003c6c:	410fc270 	.word	0x410fc270
 8003c70:	e000e400 	.word	0xe000e400
 8003c74:	20000284 	.word	0x20000284
 8003c78:	20000288 	.word	0x20000288
 8003c7c:	e000ed20 	.word	0xe000ed20
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	e000ef34 	.word	0xe000ef34

08003c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	607b      	str	r3, [r7, #4]
}
 8003ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <vPortEnterCritical+0x5c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce4 <vPortEnterCritical+0x5c>)
 8003caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <vPortEnterCritical+0x5c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d110      	bne.n	8003cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <vPortEnterCritical+0x60>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	603b      	str	r3, [r7, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <vPortEnterCritical+0x4a>
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <vPortExitCritical+0x50>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <vPortExitCritical+0x26>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	607b      	str	r3, [r7, #4]
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	e7fd      	b.n	8003d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <vPortExitCritical+0x50>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	4a08      	ldr	r2, [pc, #32]	@ (8003d3c <vPortExitCritical+0x50>)
 8003d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d1c:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <vPortExitCritical+0x50>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <vPortExitCritical+0x44>
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f383 8811 	msr	BASEPRI, r3
}
 8003d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d40:	f3ef 8009 	mrs	r0, PSP
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <pxCurrentTCBConst>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f01e 0f10 	tst.w	lr, #16
 8003d50:	bf08      	it	eq
 8003d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d64:	f380 8811 	msr	BASEPRI, r0
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f7fe ffa6 	bl	8002cc0 <vTaskSwitchContext>
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f380 8811 	msr	BASEPRI, r0
 8003d7c:	bc09      	pop	{r0, r3}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d86:	f01e 0f10 	tst.w	lr, #16
 8003d8a:	bf08      	it	eq
 8003d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d90:	f380 8809 	msr	PSP, r0
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst>:
 8003da0:	2000011c 	.word	0x2000011c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003dc2:	f002 f8a9 	bl	8005f18 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003dc6:	f7fe febd 	bl	8002b44 <xTaskIncrementTick>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003dd0:	f002 f900 	bl	8005fd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <SysTick_Handler+0x50>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e001      	b.n	8003de2 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003dde:	f002 f8dd 	bl	8005f9c <SEGGER_SYSVIEW_RecordExitISR>
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f383 8811 	msr	BASEPRI, r3
}
 8003dec:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <vPortSetupTimerInterrupt+0x34>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e06:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <vPortSetupTimerInterrupt+0x38>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <vPortSetupTimerInterrupt+0x3c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <vPortSetupTimerInterrupt+0x40>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <vPortSetupTimerInterrupt+0x44>)
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e1e:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <vPortSetupTimerInterrupt+0x34>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010
 8003e34:	e000e018 	.word	0xe000e018
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	10624dd3 	.word	0x10624dd3
 8003e40:	e000e014 	.word	0xe000e014

08003e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003e54 <vPortEnableVFP+0x10>
 8003e48:	6801      	ldr	r1, [r0, #0]
 8003e4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e4e:	6001      	str	r1, [r0, #0]
 8003e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e52:	bf00      	nop
 8003e54:	e000ed88 	.word	0xe000ed88

08003e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e5e:	f3ef 8305 	mrs	r3, IPSR
 8003e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	d915      	bls.n	8003e96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <vPortValidateInterruptPriority+0x74>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e74:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <vPortValidateInterruptPriority+0x78>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	7afa      	ldrb	r2, [r7, #11]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20b      	bcs.n	8003e96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <vPortValidateInterruptPriority+0x7c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed8 <vPortValidateInterruptPriority+0x80>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90b      	bls.n	8003ebe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	603b      	str	r3, [r7, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <vPortValidateInterruptPriority+0x62>
	}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000e3f0 	.word	0xe000e3f0
 8003ed0:	20000284 	.word	0x20000284
 8003ed4:	e000ed0c 	.word	0xe000ed0c
 8003ed8:	20000288 	.word	0x20000288

08003edc <vSetVarulMaxPRIGROUPValue>:
#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValue( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ee2:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <vSetVarulMaxPRIGROUPValue+0xa4>)
 8003ee4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	22ff      	movs	r2, #255	@ 0xff
 8003ef2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <vSetVarulMaxPRIGROUPValue+0xa8>)
 8003f08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f10:	e009      	b.n	8003f26 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f12:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d0ef      	beq.n	8003f12 <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f32:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00b      	beq.n	8003f56 <vSetVarulMaxPRIGROUPValue+0x7a>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60bb      	str	r3, [r7, #8]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <vSetVarulMaxPRIGROUPValue+0x76>
		}
	#endif

	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f56:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f5e:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <vSetVarulMaxPRIGROUPValue+0xac>)
 8003f6a:	6013      	str	r3, [r2, #0]

	/* Restore the clobbered interrupt priority register to its original
	value. */
	*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	701a      	strb	r2, [r3, #0]
}
#endif /* conifgASSERT_DEFINED */
// copy code from “port.c” line number 299 to 359 and paste it here

}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e400 	.word	0xe000e400
 8003f84:	20000284 	.word	0x20000284
 8003f88:	20000288 	.word	0x20000288

08003f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	@ 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f98:	f7fe fd02 	bl	80029a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004110 <pvPortMalloc+0x184>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fa4:	f000 f924 	bl	80041f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8004114 <pvPortMalloc+0x188>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8095 	bne.w	80040e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01e      	beq.n	8003ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f023 0307 	bic.w	r3, r3, #7
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <pvPortMalloc+0x6e>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	617b      	str	r3, [r7, #20]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d06f      	beq.n	80040e0 <pvPortMalloc+0x154>
 8004000:	4b45      	ldr	r3, [pc, #276]	@ (8004118 <pvPortMalloc+0x18c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d86a      	bhi.n	80040e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800400a:	4b44      	ldr	r3, [pc, #272]	@ (800411c <pvPortMalloc+0x190>)
 800400c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800400e:	4b43      	ldr	r3, [pc, #268]	@ (800411c <pvPortMalloc+0x190>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004014:	e004      	b.n	8004020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d903      	bls.n	8004032 <pvPortMalloc+0xa6>
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f1      	bne.n	8004016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004032:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <pvPortMalloc+0x184>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004038:	429a      	cmp	r2, r3
 800403a:	d051      	beq.n	80040e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2208      	movs	r2, #8
 8004042:	4413      	add	r3, r2
 8004044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	1ad2      	subs	r2, r2, r3
 8004056:	2308      	movs	r3, #8
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	429a      	cmp	r2, r3
 800405c:	d920      	bls.n	80040a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <pvPortMalloc+0xfc>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800409a:	69b8      	ldr	r0, [r7, #24]
 800409c:	f000 f90a 	bl	80042b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <pvPortMalloc+0x18c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <pvPortMalloc+0x18c>)
 80040ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <pvPortMalloc+0x18c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <pvPortMalloc+0x194>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d203      	bcs.n	80040c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040ba:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <pvPortMalloc+0x18c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <pvPortMalloc+0x194>)
 80040c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <pvPortMalloc+0x188>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80040d6:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <pvPortMalloc+0x198>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a11      	ldr	r2, [pc, #68]	@ (8004124 <pvPortMalloc+0x198>)
 80040de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040e0:	f7fe fc6c 	bl	80029bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <pvPortMalloc+0x17a>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60fb      	str	r3, [r7, #12]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <pvPortMalloc+0x176>
	return pvReturn;
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	@ 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20003e94 	.word	0x20003e94
 8004114:	20003ea8 	.word	0x20003ea8
 8004118:	20003e98 	.word	0x20003e98
 800411c:	20003e8c 	.word	0x20003e8c
 8004120:	20003e9c 	.word	0x20003e9c
 8004124:	20003ea0 	.word	0x20003ea0

08004128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d04f      	beq.n	80041da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800413a:	2308      	movs	r3, #8
 800413c:	425b      	negs	r3, r3
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4413      	add	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <vPortFree+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <vPortFree+0x46>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60fb      	str	r3, [r7, #12]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <vPortFree+0x66>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60bb      	str	r3, [r7, #8]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <vPortFree+0xbc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01e      	beq.n	80041da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11a      	bne.n	80041da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <vPortFree+0xbc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041b4:	f7fe fbf4 	bl	80029a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <vPortFree+0xc0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <vPortFree+0xc0>)
 80041c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041c6:	6938      	ldr	r0, [r7, #16]
 80041c8:	f000 f874 	bl	80042b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80041cc:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <vPortFree+0xc4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	4a06      	ldr	r2, [pc, #24]	@ (80041ec <vPortFree+0xc4>)
 80041d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80041d6:	f7fe fbf1 	bl	80029bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20003ea8 	.word	0x20003ea8
 80041e8:	20003e98 	.word	0x20003e98
 80041ec:	20003ea4 	.word	0x20003ea4

080041f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80041fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041fc:	4b27      	ldr	r3, [pc, #156]	@ (800429c <prvHeapInit+0xac>)
 80041fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3307      	adds	r3, #7
 800420e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	4a1f      	ldr	r2, [pc, #124]	@ (800429c <prvHeapInit+0xac>)
 8004220:	4413      	add	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <prvHeapInit+0xb0>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800422e:	4b1c      	ldr	r3, [pc, #112]	@ (80042a0 <prvHeapInit+0xb0>)
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	4413      	add	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800423c:	2208      	movs	r2, #8
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0307 	bic.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a15      	ldr	r2, [pc, #84]	@ (80042a4 <prvHeapInit+0xb4>)
 8004250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <prvHeapInit+0xb4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <prvHeapInit+0xb4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004270:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <prvHeapInit+0xb4>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <prvHeapInit+0xb8>)
 800427e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <prvHeapInit+0xbc>)
 8004286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <prvHeapInit+0xc0>)
 800428a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	2000028c 	.word	0x2000028c
 80042a0:	20003e8c 	.word	0x20003e8c
 80042a4:	20003e94 	.word	0x20003e94
 80042a8:	20003e9c 	.word	0x20003e9c
 80042ac:	20003e98 	.word	0x20003e98
 80042b0:	20003ea8 	.word	0x20003ea8

080042b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042bc:	4b28      	ldr	r3, [pc, #160]	@ (8004360 <prvInsertBlockIntoFreeList+0xac>)
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e002      	b.n	80042c8 <prvInsertBlockIntoFreeList+0x14>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d8f7      	bhi.n	80042c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d108      	bne.n	80042f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d118      	bne.n	800433c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <prvInsertBlockIntoFreeList+0xb0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d00d      	beq.n	8004332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e008      	b.n	8004344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004332:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <prvInsertBlockIntoFreeList+0xb0>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e003      	b.n	8004344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d002      	beq.n	8004352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20003e8c 	.word	0x20003e8c
 8004364:	20003e94 	.word	0x20003e94

08004368 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800436c:	4803      	ldr	r0, [pc, #12]	@ (800437c <_cbSendSystemDesc+0x14>)
 800436e:	f001 fd7d 	bl	8005e6c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004372:	4803      	ldr	r0, [pc, #12]	@ (8004380 <_cbSendSystemDesc+0x18>)
 8004374:	f001 fd7a 	bl	8005e6c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	08006aa4 	.word	0x08006aa4
 8004380:	08006ae8 	.word	0x08006ae8

08004384 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004392:	4a06      	ldr	r2, [pc, #24]	@ (80043ac <SEGGER_SYSVIEW_Conf+0x28>)
 8004394:	f001 f8f2 	bl	800557c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004398:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800439c:	f001 f92a 	bl	80055f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000000 	.word	0x20000000
 80043a8:	08004369 	.word	0x08004369
 80043ac:	08006bac 	.word	0x08006bac

080043b0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80043b6:	4b26      	ldr	r3, [pc, #152]	@ (8004450 <_DoInit+0xa0>)
 80043b8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80043ba:	22a8      	movs	r2, #168	@ 0xa8
 80043bc:	2100      	movs	r1, #0
 80043be:	6838      	ldr	r0, [r7, #0]
 80043c0:	f002 f9dd 	bl	800677e <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2203      	movs	r2, #3
 80043c8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2203      	movs	r2, #3
 80043ce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4a20      	ldr	r2, [pc, #128]	@ (8004454 <_DoInit+0xa4>)
 80043d4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <_DoInit+0xa8>)
 80043da:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043e2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <_DoInit+0xa4>)
 80043fa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	@ (800445c <_DoInit+0xac>)
 8004400:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2210      	movs	r2, #16
 8004406:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800441a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	e00c      	b.n	800443e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1c3 030f 	rsb	r3, r3, #15
 800442a:	4a0d      	ldr	r2, [pc, #52]	@ (8004460 <_DoInit+0xb0>)
 800442c:	5cd1      	ldrb	r1, [r2, r3]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	460a      	mov	r2, r1
 8004436:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3301      	adds	r3, #1
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d9ef      	bls.n	8004424 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004444:	f3bf 8f5f 	dmb	sy
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20003eac 	.word	0x20003eac
 8004454:	08006af8 	.word	0x08006af8
 8004458:	20003f54 	.word	0x20003f54
 800445c:	20004354 	.word	0x20004354
 8004460:	08006b7c 	.word	0x08006b7c

08004464 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004470:	2300      	movs	r3, #0
 8004472:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d905      	bls.n	8004494 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
 8004492:	e007      	b.n	80044a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	1acb      	subs	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3b01      	subs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bf28      	it	cs
 80044b2:	4613      	movcs	r3, r2
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80044b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bf28      	it	cs
 80044be:	4613      	movcs	r3, r2
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80044cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f002 f9e1 	bl	8006898 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	4413      	add	r3, r2
 80044dc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	4413      	add	r3, r2
 80044e4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	4413      	add	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d101      	bne.n	8004504 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004504:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1b2      	bne.n	800447a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004514:	6a3b      	ldr	r3, [r7, #32]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3728      	adds	r7, #40	@ 0x28
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800451e:	b580      	push	{r7, lr}
 8004520:	b088      	sub	sp, #32
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d911      	bls.n	8004566 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	6938      	ldr	r0, [r7, #16]
 8004552:	f002 f9a1 	bl	8006898 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004556:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004564:	e01f      	b.n	80045a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	6938      	ldr	r0, [r7, #16]
 800457a:	f002 f98d 	bl	8006898 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4413      	add	r3, r2
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	6938      	ldr	r0, [r7, #16]
 8004598:	f002 f97e 	bl	8006898 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800459c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	60da      	str	r2, [r3, #12]
}
 80045a6:	bf00      	nop
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d808      	bhi.n	80045dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	3b01      	subs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e004      	b.n	80045e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80045e6:	697b      	ldr	r3, [r7, #20]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	@ 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004600:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <SEGGER_RTT_ReadNoLock+0x108>)
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b53      	cmp	r3, #83	@ 0x53
 800460c:	d001      	beq.n	8004612 <SEGGER_RTT_ReadNoLock+0x1e>
 800460e:	f7ff fecf 	bl	80043b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3360      	adds	r3, #96	@ 0x60
 800461e:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <SEGGER_RTT_ReadNoLock+0x108>)
 8004620:	4413      	add	r3, r2
 8004622:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d92b      	bls.n	8004698 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4293      	cmp	r3, r2
 8004650:	bf28      	it	cs
 8004652:	4613      	movcs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	4413      	add	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6939      	ldr	r1, [r7, #16]
 8004664:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004666:	f002 f917 	bl	8006898 <memcpy>
    NumBytesRead += NumBytesRem;
 800466a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4413      	add	r3, r2
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004690:	429a      	cmp	r2, r3
 8004692:	d101      	bne.n	8004698 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf28      	it	cs
 80046a8:	4613      	movcs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d019      	beq.n	80046e6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	4413      	add	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046c2:	f002 f8e9 	bl	8006898 <memcpy>
    NumBytesRead += NumBytesRem;
 80046c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4413      	add	r3, r2
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80046f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3730      	adds	r7, #48	@ 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20003eac 	.word	0x20003eac

08004700 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <SEGGER_RTT_WriteNoLock+0x9c>)
 800471e:	4413      	add	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d029      	beq.n	800477e <SEGGER_RTT_WriteNoLock+0x7e>
 800472a:	2b02      	cmp	r3, #2
 800472c:	d82e      	bhi.n	800478c <SEGGER_RTT_WriteNoLock+0x8c>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <SEGGER_RTT_WriteNoLock+0x38>
 8004732:	2b01      	cmp	r3, #1
 8004734:	d013      	beq.n	800475e <SEGGER_RTT_WriteNoLock+0x5e>
 8004736:	e029      	b.n	800478c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f7ff ff38 	bl	80045ae <_GetAvailWriteSpace>
 800473e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d202      	bcs.n	800474e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800474c:	e021      	b.n	8004792 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f7ff fee1 	bl	800451e <_WriteNoCheck>
    break;
 800475c:	e019      	b.n	8004792 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff25 	bl	80045ae <_GetAvailWriteSpace>
 8004764:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4293      	cmp	r3, r2
 800476c:	bf28      	it	cs
 800476e:	4613      	movcs	r3, r2
 8004770:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff fed1 	bl	800451e <_WriteNoCheck>
    break;
 800477c:	e009      	b.n	8004792 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f7ff fe6e 	bl	8004464 <_WriteBlocking>
 8004788:	61f8      	str	r0, [r7, #28]
    break;
 800478a:	e002      	b.n	8004792 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
    break;
 8004790:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004792:	69fb      	ldr	r3, [r7, #28]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20003eac 	.word	0x20003eac

080047a0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80047ac:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <SEGGER_RTT_Write+0x48>)
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b53      	cmp	r3, #83	@ 0x53
 80047b8:	d001      	beq.n	80047be <SEGGER_RTT_Write+0x1e>
 80047ba:	f7ff fdf9 	bl	80043b0 <_DoInit>
  SEGGER_RTT_LOCK();
 80047be:	f3ef 8311 	mrs	r3, BASEPRI
 80047c2:	f04f 0120 	mov.w	r1, #32
 80047c6:	f381 8811 	msr	BASEPRI, r1
 80047ca:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff ff95 	bl	8004700 <SEGGER_RTT_WriteNoLock>
 80047d6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20003eac 	.word	0x20003eac

080047ec <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 80047fa:	4b20      	ldr	r3, [pc, #128]	@ (800487c <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b53      	cmp	r3, #83	@ 0x53
 8004806:	d001      	beq.n	800480c <SEGGER_RTT_ConfigUpBuffer+0x20>
 8004808:	f7ff fdd2 	bl	80043b0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800480c:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800480e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d82a      	bhi.n	800486c <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8004816:	f3ef 8311 	mrs	r3, BASEPRI
 800481a:	f04f 0120 	mov.w	r1, #32
 800481e:	f381 8811 	msr	BASEPRI, r1
 8004822:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	4613      	mov	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485e:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
 800486a:	e002      	b.n	8004872 <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	@ 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20003eac 	.word	0x20003eac

08004880 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	@ 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800488e:	4b21      	ldr	r3, [pc, #132]	@ (8004914 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b53      	cmp	r3, #83	@ 0x53
 800489a:	d001      	beq.n	80048a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800489c:	f7ff fd88 	bl	80043b0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004914 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80048a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d82c      	bhi.n	8004904 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80048aa:	f3ef 8311 	mrs	r3, BASEPRI
 80048ae:	f04f 0120 	mov.w	r1, #32
 80048b2:	f381 8811 	msr	BASEPRI, r1
 80048b6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	3360      	adds	r3, #96	@ 0x60
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048f4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
 8004902:	e002      	b.n	800490a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800490c:	4618      	mov	r0, r3
 800490e:	3728      	adds	r7, #40	@ 0x28
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20003eac 	.word	0x20003eac

08004918 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d80e      	bhi.n	8004954 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d115      	bne.n	800498c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6918      	ldr	r0, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	461a      	mov	r2, r3
 800496e:	f7ff ff17 	bl	80047a0 <SEGGER_RTT_Write>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	d004      	beq.n	8004986 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004982:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8004984:	e002      	b.n	800498c <_StoreChar+0x74>
      p->Cnt = 0u;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80049a6:	2301      	movs	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80049ae:	e007      	b.n	80049c0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	623b      	str	r3, [r7, #32]
    Width++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d2f3      	bcs.n	80049b0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d901      	bls.n	80049d4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80049d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d125      	bne.n	8004a2a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d022      	beq.n	8004a2a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <_PrintUnsigned+0x66>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <_PrintUnsigned+0x66>
        c = '0';
 80049f4:	2330      	movs	r3, #48	@ 0x30
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e001      	b.n	80049fe <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80049fa:	2320      	movs	r3, #32
 80049fc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049fe:	e00b      	b.n	8004a18 <_PrintUnsigned+0x84>
        FieldWidth--;
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	3b01      	subs	r3, #1
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004a06:	7efb      	ldrb	r3, [r7, #27]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff84 	bl	8004918 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db07      	blt.n	8004a28 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <_PrintUnsigned+0x96>
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3ec      	bcc.n	8004a00 <_PrintUnsigned+0x6c>
 8004a26:	e000      	b.n	8004a2a <_PrintUnsigned+0x96>
          break;
 8004a28:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db55      	blt.n	8004ade <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d903      	bls.n	8004a40 <_PrintUnsigned+0xac>
        NumDigits--;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	e009      	b.n	8004a54 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d200      	bcs.n	8004a54 <_PrintUnsigned+0xc0>
          break;
 8004a52:	e005      	b.n	8004a60 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004a5e:	e7e8      	b.n	8004a32 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004a78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <_PrintUnsigned+0x154>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff48 	bl	8004918 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db08      	blt.n	8004aa2 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8004a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1df      	bne.n	8004a60 <_PrintUnsigned+0xcc>
 8004aa0:	e000      	b.n	8004aa4 <_PrintUnsigned+0x110>
        break;
 8004aa2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d014      	beq.n	8004ade <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ab4:	e00a      	b.n	8004acc <_PrintUnsigned+0x138>
          FieldWidth--;
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8004abc:	2120      	movs	r1, #32
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff2a 	bl	8004918 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db07      	blt.n	8004adc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <_PrintUnsigned+0x14a>
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d3ed      	bcc.n	8004ab6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8004ada:	e000      	b.n	8004ade <_PrintUnsigned+0x14a>
            break;
 8004adc:	bf00      	nop
}
 8004ade:	bf00      	nop
 8004ae0:	3728      	adds	r7, #40	@ 0x28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08006b90 	.word	0x08006b90

08004aec <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfb8      	it	lt
 8004b00:	425b      	neglt	r3, r3
 8004b02:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b08:	e007      	b.n	8004b1a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b12:	613b      	str	r3, [r7, #16]
    Width++;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3301      	adds	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	daf3      	bge.n	8004b0a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d901      	bls.n	8004b2e <_PrintInt+0x42>
    Width = NumDigits;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <_PrintInt+0x5e>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	db04      	blt.n	8004b44 <_PrintInt+0x58>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <_PrintInt+0x5e>
    FieldWidth--;
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <_PrintInt+0x6e>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01c      	beq.n	8004b94 <_PrintInt+0xa8>
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d117      	bne.n	8004b94 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b6a:	e00a      	b.n	8004b82 <_PrintInt+0x96>
        FieldWidth--;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004b72:	2120      	movs	r1, #32
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fecf 	bl	8004918 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db07      	blt.n	8004b92 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <_PrintInt+0xa8>
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d3ed      	bcc.n	8004b6c <_PrintInt+0x80>
 8004b90:	e000      	b.n	8004b94 <_PrintInt+0xa8>
          break;
 8004b92:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db4a      	blt.n	8004c32 <_PrintInt+0x146>
    if (v < 0) {
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da07      	bge.n	8004bb2 <_PrintInt+0xc6>
      v = -v;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004ba8:	212d      	movs	r1, #45	@ 0x2d
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff feb4 	bl	8004918 <_StoreChar>
 8004bb0:	e008      	b.n	8004bc4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8004bbc:	212b      	movs	r1, #43	@ 0x2b
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff feaa 	bl	8004918 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db32      	blt.n	8004c32 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01f      	beq.n	8004c16 <_PrintInt+0x12a>
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11a      	bne.n	8004c16 <_PrintInt+0x12a>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d117      	bne.n	8004c16 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d014      	beq.n	8004c16 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bec:	e00a      	b.n	8004c04 <_PrintInt+0x118>
            FieldWidth--;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8004bf4:	2130      	movs	r1, #48	@ 0x30
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff fe8e 	bl	8004918 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db07      	blt.n	8004c14 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <_PrintInt+0x12a>
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3ed      	bcc.n	8004bee <_PrintInt+0x102>
 8004c12:	e000      	b.n	8004c16 <_PrintInt+0x12a>
              break;
 8004c14:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	db09      	blt.n	8004c32 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff feb1 	bl	8004994 <_PrintUnsigned>
      }
    }
  }
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b0a4      	sub	sp, #144	@ 0x90
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8004c4e:	2340      	movs	r3, #64	@ 0x40
 8004c50:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8004c52:	2300      	movs	r3, #0
 8004c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8004c6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 81d9 	beq.w	8005028 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8004c76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004c7a:	2b25      	cmp	r3, #37	@ 0x25
 8004c7c:	f040 81c7 	bne.w	800500e <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004c80:	2300      	movs	r3, #0
 8004c82:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8004c92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004c96:	3b23      	subs	r3, #35	@ 0x23
 8004c98:	2b0d      	cmp	r3, #13
 8004c9a:	d83f      	bhi.n	8004d1c <SEGGER_RTT_vprintf+0xe0>
 8004c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <SEGGER_RTT_vprintf+0x68>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004d1d 	.word	0x08004d1d
 8004cac:	08004d1d 	.word	0x08004d1d
 8004cb0:	08004d1d 	.word	0x08004d1d
 8004cb4:	08004d1d 	.word	0x08004d1d
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004d1d 	.word	0x08004d1d
 8004cc0:	08004d1d 	.word	0x08004d1d
 8004cc4:	08004cfd 	.word	0x08004cfd
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004d1d 	.word	0x08004d1d
 8004cd4:	08004d1d 	.word	0x08004d1d
 8004cd8:	08004ced 	.word	0x08004ced
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	e01b      	b.n	8004d24 <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cee:	f043 0302 	orr.w	r3, r3, #2
 8004cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	e013      	b.n	8004d24 <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	e00b      	b.n	8004d24 <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0e:	f043 0308 	orr.w	r3, r3, #8
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	e003      	b.n	8004d24 <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d22:	bf00      	nop
        }
      } while (v);
 8004d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ae      	bne.n	8004c8a <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8004d38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d3e:	d912      	bls.n	8004d66 <SEGGER_RTT_vprintf+0x12a>
 8004d40:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004d44:	2b39      	cmp	r3, #57	@ 0x39
 8004d46:	d80e      	bhi.n	8004d66 <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8004d4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b30      	subs	r3, #48	@ 0x30
 8004d62:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8004d64:	e7e4      	b.n	8004d30 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8004d78:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d7e:	d132      	bne.n	8004de6 <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d8c:	d10d      	bne.n	8004daa <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6011      	str	r1, [r2, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004da8:	e01d      	b.n	8004de6 <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8004db2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004db6:	2b2f      	cmp	r3, #47	@ 0x2f
 8004db8:	d915      	bls.n	8004de6 <SEGGER_RTT_vprintf+0x1aa>
 8004dba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004dbe:	2b39      	cmp	r3, #57	@ 0x39
 8004dc0:	d811      	bhi.n	8004de6 <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8004dce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004dde:	4413      	add	r3, r2
 8004de0:	3b30      	subs	r3, #48	@ 0x30
 8004de2:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8004de4:	e7e1      	b.n	8004daa <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8004dee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004df2:	2b6c      	cmp	r3, #108	@ 0x6c
 8004df4:	d003      	beq.n	8004dfe <SEGGER_RTT_vprintf+0x1c2>
 8004df6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004dfa:	2b68      	cmp	r3, #104	@ 0x68
 8004dfc:	d107      	bne.n	8004e0e <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8004e0c:	e7ef      	b.n	8004dee <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004e12:	2b25      	cmp	r3, #37	@ 0x25
 8004e14:	f000 80ef 	beq.w	8004ff6 <SEGGER_RTT_vprintf+0x3ba>
 8004e18:	2b25      	cmp	r3, #37	@ 0x25
 8004e1a:	f2c0 80f3 	blt.w	8005004 <SEGGER_RTT_vprintf+0x3c8>
 8004e1e:	2b78      	cmp	r3, #120	@ 0x78
 8004e20:	f300 80f0 	bgt.w	8005004 <SEGGER_RTT_vprintf+0x3c8>
 8004e24:	2b58      	cmp	r3, #88	@ 0x58
 8004e26:	f2c0 80ed 	blt.w	8005004 <SEGGER_RTT_vprintf+0x3c8>
 8004e2a:	3b58      	subs	r3, #88	@ 0x58
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	f200 80e9 	bhi.w	8005004 <SEGGER_RTT_vprintf+0x3c8>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <SEGGER_RTT_vprintf+0x1fc>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004f3b 	.word	0x08004f3b
 8004e3c:	08005005 	.word	0x08005005
 8004e40:	08005005 	.word	0x08005005
 8004e44:	08005005 	.word	0x08005005
 8004e48:	08005005 	.word	0x08005005
 8004e4c:	08005005 	.word	0x08005005
 8004e50:	08005005 	.word	0x08005005
 8004e54:	08005005 	.word	0x08005005
 8004e58:	08005005 	.word	0x08005005
 8004e5c:	08005005 	.word	0x08005005
 8004e60:	08005005 	.word	0x08005005
 8004e64:	08004ebd 	.word	0x08004ebd
 8004e68:	08004ee7 	.word	0x08004ee7
 8004e6c:	08005005 	.word	0x08005005
 8004e70:	08005005 	.word	0x08005005
 8004e74:	08005005 	.word	0x08005005
 8004e78:	08005005 	.word	0x08005005
 8004e7c:	08005005 	.word	0x08005005
 8004e80:	08005005 	.word	0x08005005
 8004e84:	08005005 	.word	0x08005005
 8004e88:	08005005 	.word	0x08005005
 8004e8c:	08005005 	.word	0x08005005
 8004e90:	08005005 	.word	0x08005005
 8004e94:	08005005 	.word	0x08005005
 8004e98:	08004fcd 	.word	0x08004fcd
 8004e9c:	08005005 	.word	0x08005005
 8004ea0:	08005005 	.word	0x08005005
 8004ea4:	08004f65 	.word	0x08004f65
 8004ea8:	08005005 	.word	0x08005005
 8004eac:	08004f11 	.word	0x08004f11
 8004eb0:	08005005 	.word	0x08005005
 8004eb4:	08005005 	.word	0x08005005
 8004eb8:	08004f3b 	.word	0x08004f3b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8004ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ed0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8004ed4:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8004ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fd1a 	bl	8004918 <_StoreChar>
        break;
 8004ee4:	e08f      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1d19      	adds	r1, r3, #4
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6011      	str	r1, [r2, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8004ef6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8004efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f04:	220a      	movs	r2, #10
 8004f06:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004f0a:	f7ff fdef 	bl	8004aec <_PrintInt>
        break;
 8004f0e:	e07a      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8004f20:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004f24:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8004f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f32:	220a      	movs	r2, #10
 8004f34:	f7ff fd2e 	bl	8004994 <_PrintUnsigned>
        break;
 8004f38:	e065      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1d19      	adds	r1, r3, #4
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6011      	str	r1, [r2, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8004f4a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004f4e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8004f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	f7ff fd19 	bl	8004994 <_PrintUnsigned>
        break;
 8004f62:	e050      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8004f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8004f78:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <SEGGER_RTT_vprintf+0x41c>)
 8004f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8004f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8004f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8004f90:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8004f98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <SEGGER_RTT_vprintf+0x36a>
 8004fa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8004fa6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8004faa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fcb1 	bl	8004918 <_StoreChar>
            Precision--;
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8004fbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dadf      	bge.n	8004f82 <SEGGER_RTT_vprintf+0x346>
        }
        break;
 8004fc2:	e020      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
              break;
 8004fc4:	bf00      	nop
 8004fc6:	e01e      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
              break;
 8004fc8:	bf00      	nop
        break;
 8004fca:	e01c      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8004fdc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004fe0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	2308      	movs	r3, #8
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2308      	movs	r3, #8
 8004fee:	2210      	movs	r2, #16
 8004ff0:	f7ff fcd0 	bl	8004994 <_PrintUnsigned>
        break;
 8004ff4:	e007      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004ff6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ffa:	2125      	movs	r1, #37	@ 0x25
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fc8b 	bl	8004918 <_StoreChar>
        break;
 8005002:	e000      	b.n	8005006 <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 8005004:	bf00      	nop
      }
      sFormat++;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3301      	adds	r3, #1
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	e007      	b.n	800501e <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 800500e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8005012:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fc7d 	bl	8004918 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800501e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005020:	2b00      	cmp	r3, #0
 8005022:	f6bf ae1c 	bge.w	8004c5e <SEGGER_RTT_vprintf+0x22>
 8005026:	e000      	b.n	800502a <SEGGER_RTT_vprintf+0x3ee>
      break;
 8005028:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 800502a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800502c:	2b00      	cmp	r3, #0
 800502e:	dd0d      	ble.n	800504c <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8005030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8005036:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4619      	mov	r1, r3
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff fbae 	bl	80047a0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8005044:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005046:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005048:	4413      	add	r3, r2
 800504a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 800504c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 800504e:	4618      	mov	r0, r3
 8005050:	3788      	adds	r7, #136	@ 0x88
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	08006b04 	.word	0x08006b04

0800505c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800505c:	b40e      	push	{r1, r2, r3}
 800505e:	b580      	push	{r7, lr}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8005066:	f107 0320 	add.w	r3, r7, #32
 800506a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	461a      	mov	r2, r3
 8005072:	69f9      	ldr	r1, [r7, #28]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fde1 	bl	8004c3c <SEGGER_RTT_vprintf>
 800507a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005088:	b003      	add	sp, #12
 800508a:	4770      	bx	lr

0800508c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	60fa      	str	r2, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e022      	b.n	80050f0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	60fa      	str	r2, [r7, #12]
 80050b4:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b80      	cmp	r3, #128	@ 0x80
 80050ba:	d90a      	bls.n	80050d2 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80050c0:	e007      	b.n	80050d2 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	1c53      	adds	r3, r2, #1
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	60f9      	str	r1, [r7, #12]
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <_EncodeStr+0x58>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80050f0:	68fb      	ldr	r3, [r7, #12]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3307      	adds	r3, #7
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800511e:	1cfb      	adds	r3, r7, #3
 8005120:	2201      	movs	r2, #1
 8005122:	4619      	mov	r1, r3
 8005124:	2001      	movs	r0, #1
 8005126:	f7ff fa65 	bl	80045f4 <SEGGER_RTT_ReadNoLock>
 800512a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d053      	beq.n	80051da <_HandleIncomingPacket+0xc2>
    switch (Cmd) {
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	2b80      	cmp	r3, #128	@ 0x80
 8005136:	d031      	beq.n	800519c <_HandleIncomingPacket+0x84>
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	dc3e      	bgt.n	80051ba <_HandleIncomingPacket+0xa2>
 800513c:	2b07      	cmp	r3, #7
 800513e:	dc15      	bgt.n	800516c <_HandleIncomingPacket+0x54>
 8005140:	2b00      	cmp	r3, #0
 8005142:	dd3a      	ble.n	80051ba <_HandleIncomingPacket+0xa2>
 8005144:	3b01      	subs	r3, #1
 8005146:	2b06      	cmp	r3, #6
 8005148:	d837      	bhi.n	80051ba <_HandleIncomingPacket+0xa2>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <_HandleIncomingPacket+0x38>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005173 	.word	0x08005173
 8005154:	08005179 	.word	0x08005179
 8005158:	0800517f 	.word	0x0800517f
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518b 	.word	0x0800518b
 8005164:	08005191 	.word	0x08005191
 8005168:	08005197 	.word	0x08005197
 800516c:	2b7f      	cmp	r3, #127	@ 0x7f
 800516e:	d02f      	beq.n	80051d0 <_HandleIncomingPacket+0xb8>
 8005170:	e023      	b.n	80051ba <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005172:	f000 fc0b 	bl	800598c <SEGGER_SYSVIEW_Start>
      break;
 8005176:	e030      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005178:	f000 fcc0 	bl	8005afc <SEGGER_SYSVIEW_Stop>
      break;
 800517c:	e02d      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800517e:	f000 fe99 	bl	8005eb4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005182:	e02a      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005184:	f000 fe5e 	bl	8005e44 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005188:	e027      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800518a:	f000 fcdd 	bl	8005b48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800518e:	e024      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005190:	f001 f936 	bl	8006400 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005194:	e021      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005196:	f001 f915 	bl	80063c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800519a:	e01e      	b.n	80051da <_HandleIncomingPacket+0xc2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800519c:	1cfb      	adds	r3, r7, #3
 800519e:	2201      	movs	r2, #1
 80051a0:	4619      	mov	r1, r3
 80051a2:	2001      	movs	r0, #1
 80051a4:	f7ff fa26 	bl	80045f4 <SEGGER_RTT_ReadNoLock>
 80051a8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d011      	beq.n	80051d4 <_HandleIncomingPacket+0xbc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f87c 	bl	80062b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80051b8:	e00c      	b.n	80051d4 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da0a      	bge.n	80051d8 <_HandleIncomingPacket+0xc0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051c2:	1cfb      	adds	r3, r7, #3
 80051c4:	2201      	movs	r2, #1
 80051c6:	4619      	mov	r1, r3
 80051c8:	2001      	movs	r0, #1
 80051ca:	f7ff fa13 	bl	80045f4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80051ce:	e003      	b.n	80051d8 <_HandleIncomingPacket+0xc0>
      break;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <_HandleIncomingPacket+0xc2>
      break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <_HandleIncomingPacket+0xc2>
      break;
 80051d8:	bf00      	nop
    }
  }
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	@ 0x30
 80051e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051ea:	2301      	movs	r3, #1
 80051ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	3301      	adds	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f8:	4b30      	ldr	r3, [pc, #192]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fe:	e00b      	b.n	8005218 <_TrySendOverflowPacket+0x34>
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	b2da      	uxtb	r2, r3
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800520a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	2b7f      	cmp	r3, #127	@ 0x7f
 800521c:	d8f0      	bhi.n	8005200 <_TrySendOverflowPacket+0x1c>
 800521e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800522e:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <_TrySendOverflowPacket+0xdc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005234:	4b21      	ldr	r3, [pc, #132]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	e00b      	b.n	8005260 <_TrySendOverflowPacket+0x7c>
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	6279      	str	r1, [r7, #36]	@ 0x24
 8005252:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b7f      	cmp	r3, #127	@ 0x7f
 8005264:	d8f0      	bhi.n	8005248 <_TrySendOverflowPacket+0x64>
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	627a      	str	r2, [r7, #36]	@ 0x24
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	461a      	mov	r2, r3
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	4619      	mov	r1, r3
 8005282:	2001      	movs	r0, #1
 8005284:	f7fa ffa4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005288:	4603      	mov	r3, r0
 800528a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005298:	4b08      	ldr	r3, [pc, #32]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e004      	b.n	80052b0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80052a6:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	4a03      	ldr	r2, [pc, #12]	@ (80052bc <_TrySendOverflowPacket+0xd8>)
 80052ae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80052b0:	693b      	ldr	r3, [r7, #16]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	@ 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000636c 	.word	0x2000636c
 80052c0:	e0001004 	.word	0xe0001004

080052c4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	@ 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80052d0:	4b98      	ldr	r3, [pc, #608]	@ (8005534 <_SendPacket+0x270>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d010      	beq.n	80052fa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80052d8:	4b96      	ldr	r3, [pc, #600]	@ (8005534 <_SendPacket+0x270>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8127 	beq.w	8005530 <_SendPacket+0x26c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052e2:	4b94      	ldr	r3, [pc, #592]	@ (8005534 <_SendPacket+0x270>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d109      	bne.n	80052fe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052ea:	f7ff ff7b 	bl	80051e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052ee:	4b91      	ldr	r3, [pc, #580]	@ (8005534 <_SendPacket+0x270>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	f040 8122 	bne.w	800553c <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80052f8:	e001      	b.n	80052fe <_SendPacket+0x3a>
    goto Send;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <_SendPacket+0x3c>
Send:
 80052fe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b1f      	cmp	r3, #31
 8005304:	d809      	bhi.n	800531a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005306:	4b8b      	ldr	r3, [pc, #556]	@ (8005534 <_SendPacket+0x270>)
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 8113 	bne.w	8005540 <_SendPacket+0x27c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b17      	cmp	r3, #23
 800531e:	d807      	bhi.n	8005330 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e0c4      	b.n	80054ba <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b7f      	cmp	r3, #127	@ 0x7f
 800533c:	d912      	bls.n	8005364 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	09da      	lsrs	r2, r3, #7
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	3a01      	subs	r2, #1
 8005356:	60fa      	str	r2, [r7, #12]
 8005358:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e006      	b.n	8005372 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3b01      	subs	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b7e      	cmp	r3, #126	@ 0x7e
 8005376:	d807      	bhi.n	8005388 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e098      	b.n	80054ba <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800538e:	d212      	bcs.n	80053b6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	09da      	lsrs	r2, r3, #7
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b01      	subs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	3a01      	subs	r2, #1
 80053a8:	60fa      	str	r2, [r7, #12]
 80053aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e081      	b.n	80054ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053bc:	d21d      	bcs.n	80053fa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0b9a      	lsrs	r2, r3, #14
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	09db      	lsrs	r3, r3, #7
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	3a01      	subs	r2, #1
 80053d8:	60fa      	str	r2, [r7, #12]
 80053da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	3a01      	subs	r2, #1
 80053ec:	60fa      	str	r2, [r7, #12]
 80053ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e05f      	b.n	80054ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005400:	d228      	bcs.n	8005454 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0d5a      	lsrs	r2, r3, #21
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b01      	subs	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0b9b      	lsrs	r3, r3, #14
 8005416:	b2db      	uxtb	r3, r3
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	3a01      	subs	r2, #1
 800541c:	60fa      	str	r2, [r7, #12]
 800541e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	09db      	lsrs	r3, r3, #7
 800542c:	b2db      	uxtb	r3, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	3a01      	subs	r2, #1
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	3a01      	subs	r2, #1
 8005446:	60fa      	str	r2, [r7, #12]
 8005448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e032      	b.n	80054ba <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	0f1a      	lsrs	r2, r3, #28
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3b01      	subs	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0d5b      	lsrs	r3, r3, #21
 8005468:	b2db      	uxtb	r3, r3
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	3a01      	subs	r2, #1
 800546e:	60fa      	str	r2, [r7, #12]
 8005470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	0b9b      	lsrs	r3, r3, #14
 800547e:	b2db      	uxtb	r3, r3
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	3a01      	subs	r2, #1
 8005484:	60fa      	str	r2, [r7, #12]
 8005486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	3a01      	subs	r2, #1
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	3a01      	subs	r2, #1
 80054ae:	60fa      	str	r2, [r7, #12]
 80054b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <_SendPacket+0x274>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005534 <_SendPacket+0x270>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	e00b      	b.n	80054ec <_SendPacket+0x228>
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80054de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	09db      	lsrs	r3, r3, #7
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80054f0:	d8f0      	bhi.n	80054d4 <_SendPacket+0x210>
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	461a      	mov	r2, r3
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	2001      	movs	r0, #1
 800550e:	f7fa fe5f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005512:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <_SendPacket+0x25e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800551a:	4a06      	ldr	r2, [pc, #24]	@ (8005534 <_SendPacket+0x270>)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	60d3      	str	r3, [r2, #12]
 8005520:	e00f      	b.n	8005542 <_SendPacket+0x27e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005522:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <_SendPacket+0x270>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4b02      	ldr	r3, [pc, #8]	@ (8005534 <_SendPacket+0x270>)
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e008      	b.n	8005542 <_SendPacket+0x27e>
    goto SendDone;
 8005530:	bf00      	nop
 8005532:	e006      	b.n	8005542 <_SendPacket+0x27e>
 8005534:	2000636c 	.word	0x2000636c
 8005538:	e0001004 	.word	0xe0001004
      goto SendDone;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <_SendPacket+0x27e>
      goto SendDone;
 8005540:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005542:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <_SendPacket+0x2b0>)
 8005544:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <_SendPacket+0x2b0>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554e:	429a      	cmp	r2, r3
 8005550:	d00b      	beq.n	800556a <_SendPacket+0x2a6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005552:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <_SendPacket+0x2b4>)
 8005554:	789b      	ldrb	r3, [r3, #2]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <_SendPacket+0x2a6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800555a:	4b07      	ldr	r3, [pc, #28]	@ (8005578 <_SendPacket+0x2b4>)
 800555c:	2201      	movs	r2, #1
 800555e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005560:	f7ff fdda 	bl	8005118 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <_SendPacket+0x2b4>)
 8005566:	2200      	movs	r2, #0
 8005568:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800556a:	bf00      	nop
 800556c:	3728      	adds	r7, #40	@ 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20003eac 	.word	0x20003eac
 8005578:	2000636c 	.word	0x2000636c

0800557c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005592:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <SEGGER_SYSVIEW_Init+0x64>)
 8005594:	4913      	ldr	r1, [pc, #76]	@ (80055e4 <SEGGER_SYSVIEW_Init+0x68>)
 8005596:	2001      	movs	r0, #1
 8005598:	f7ff f928 	bl	80047ec <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800559c:	2300      	movs	r3, #0
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2308      	movs	r3, #8
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <SEGGER_SYSVIEW_Init+0x6c>)
 80055a4:	490f      	ldr	r1, [pc, #60]	@ (80055e4 <SEGGER_SYSVIEW_Init+0x68>)
 80055a6:	2001      	movs	r0, #1
 80055a8:	f7ff f96a 	bl	8004880 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80055ac:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055b2:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x74>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a0d      	ldr	r2, [pc, #52]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80055ba:	4a0c      	ldr	r2, [pc, #48]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055c0:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055c6:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055cc:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055d2:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <SEGGER_SYSVIEW_Init+0x70>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20004364 	.word	0x20004364
 80055e4:	08006b14 	.word	0x08006b14
 80055e8:	20006364 	.word	0x20006364
 80055ec:	2000636c 	.word	0x2000636c
 80055f0:	e0001004 	.word	0xe0001004

080055f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80055fc:	4a04      	ldr	r2, [pc, #16]	@ (8005610 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6113      	str	r3, [r2, #16]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	2000636c 	.word	0x2000636c

08005614 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800561c:	f3ef 8311 	mrs	r3, BASEPRI
 8005620:	f04f 0120 	mov.w	r1, #32
 8005624:	f381 8811 	msr	BASEPRI, r1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	4808      	ldr	r0, [pc, #32]	@ (800564c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800562c:	f7ff fd67 	bl	80050fe <_PreparePacket>
 8005630:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f7ff fe44 	bl	80052c4 <_SendPacket>
  RECORD_END();
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f383 8811 	msr	BASEPRI, r3
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	2000639c 	.word	0x2000639c

08005650 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800565a:	f3ef 8311 	mrs	r3, BASEPRI
 800565e:	f04f 0120 	mov.w	r1, #32
 8005662:	f381 8811 	msr	BASEPRI, r1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	4816      	ldr	r0, [pc, #88]	@ (80056c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800566a:	f7ff fd48 	bl	80050fe <_PreparePacket>
 800566e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e00b      	b.n	8005696 <SEGGER_SYSVIEW_RecordU32+0x46>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	61f9      	str	r1, [r7, #28]
 8005688:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	09db      	lsrs	r3, r3, #7
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b7f      	cmp	r3, #127	@ 0x7f
 800569a:	d8f0      	bhi.n	800567e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	61fa      	str	r2, [r7, #28]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	6938      	ldr	r0, [r7, #16]
 80056b2:	f7ff fe07 	bl	80052c4 <_SendPacket>
  RECORD_END();
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f383 8811 	msr	BASEPRI, r3
}
 80056bc:	bf00      	nop
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2000639c 	.word	0x2000639c

080056c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	@ 0x30
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056d4:	f3ef 8311 	mrs	r3, BASEPRI
 80056d8:	f04f 0120 	mov.w	r1, #32
 80056dc:	f381 8811 	msr	BASEPRI, r1
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	4825      	ldr	r0, [pc, #148]	@ (8005778 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056e4:	f7ff fd0b 	bl	80050fe <_PreparePacket>
 80056e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f6:	e00b      	b.n	8005710 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005702:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	09db      	lsrs	r3, r3, #7
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b7f      	cmp	r3, #127	@ 0x7f
 8005714:	d8f0      	bhi.n	80056f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	e00b      	b.n	8005748 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	6279      	str	r1, [r7, #36]	@ 0x24
 800573a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	09db      	lsrs	r3, r3, #7
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b7f      	cmp	r3, #127	@ 0x7f
 800574c:	d8f0      	bhi.n	8005730 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	627a      	str	r2, [r7, #36]	@ 0x24
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	69b8      	ldr	r0, [r7, #24]
 8005764:	f7ff fdae 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
 8005770:	3730      	adds	r7, #48	@ 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2000639c 	.word	0x2000639c

0800577c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b08e      	sub	sp, #56	@ 0x38
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800578a:	f3ef 8311 	mrs	r3, BASEPRI
 800578e:	f04f 0120 	mov.w	r1, #32
 8005792:	f381 8811 	msr	BASEPRI, r1
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	4832      	ldr	r0, [pc, #200]	@ (8005864 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800579a:	f7ff fcb0 	bl	80050fe <_PreparePacket>
 800579e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ac:	e00b      	b.n	80057c6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	1c59      	adds	r1, r3, #1
 80057b6:	6379      	str	r1, [r7, #52]	@ 0x34
 80057b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ca:	d8f0      	bhi.n	80057ae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80057d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e4:	e00b      	b.n	80057fe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	09db      	lsrs	r3, r3, #7
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	2b7f      	cmp	r3, #127	@ 0x7f
 8005802:	d8f0      	bhi.n	80057e6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	e00b      	b.n	8005836 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	1c59      	adds	r1, r3, #1
 8005826:	6279      	str	r1, [r7, #36]	@ 0x24
 8005828:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	09db      	lsrs	r3, r3, #7
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b7f      	cmp	r3, #127	@ 0x7f
 800583a:	d8f0      	bhi.n	800581e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	627a      	str	r2, [r7, #36]	@ 0x24
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	69b8      	ldr	r0, [r7, #24]
 8005852:	f7ff fd37 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
 800585e:	3738      	adds	r7, #56	@ 0x38
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	2000639c 	.word	0x2000639c

08005868 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	@ 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	f04f 0120 	mov.w	r1, #32
 800587e:	f381 8811 	msr	BASEPRI, r1
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	4840      	ldr	r0, [pc, #256]	@ (8005988 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005886:	f7ff fc3a 	bl	80050fe <_PreparePacket>
 800588a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005898:	e00b      	b.n	80058b2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80058a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ae:	09db      	lsrs	r3, r3, #7
 80058b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b6:	d8f0      	bhi.n	800589a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80058b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	6379      	str	r1, [r7, #52]	@ 0x34
 80058dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005908:	e00b      	b.n	8005922 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	2b7f      	cmp	r3, #127	@ 0x7f
 8005926:	d8f0      	bhi.n	800590a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800592e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
 800593c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	e00b      	b.n	800595a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	6279      	str	r1, [r7, #36]	@ 0x24
 800594c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2b7f      	cmp	r3, #127	@ 0x7f
 800595e:	d8f0      	bhi.n	8005942 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	627a      	str	r2, [r7, #36]	@ 0x24
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	6979      	ldr	r1, [r7, #20]
 8005974:	69b8      	ldr	r0, [r7, #24]
 8005976:	f7ff fca5 	bl	80052c4 <_SendPacket>
  RECORD_END();
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f383 8811 	msr	BASEPRI, r3
}
 8005980:	bf00      	nop
 8005982:	3740      	adds	r7, #64	@ 0x40
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	2000639c 	.word	0x2000639c

0800598c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b08c      	sub	sp, #48	@ 0x30
 8005990:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005992:	4b57      	ldr	r3, [pc, #348]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005998:	f3ef 8311 	mrs	r3, BASEPRI
 800599c:	f04f 0120 	mov.w	r1, #32
 80059a0:	f381 8811 	msr	BASEPRI, r1
 80059a4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80059a6:	220a      	movs	r2, #10
 80059a8:	4952      	ldr	r1, [pc, #328]	@ (8005af4 <SEGGER_SYSVIEW_Start+0x168>)
 80059aa:	2001      	movs	r0, #1
 80059ac:	f7fa fc10 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80059b6:	200a      	movs	r0, #10
 80059b8:	f7ff fe2c 	bl	8005614 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059bc:	f3ef 8311 	mrs	r3, BASEPRI
 80059c0:	f04f 0120 	mov.w	r1, #32
 80059c4:	f381 8811 	msr	BASEPRI, r1
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	484b      	ldr	r0, [pc, #300]	@ (8005af8 <SEGGER_SYSVIEW_Start+0x16c>)
 80059cc:	f7ff fb97 	bl	80050fe <_PreparePacket>
 80059d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059da:	4b45      	ldr	r3, [pc, #276]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e0:	e00b      	b.n	80059fa <SEGGER_SYSVIEW_Start+0x6e>
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <SEGGER_SYSVIEW_Start+0x56>
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a14:	4b36      	ldr	r3, [pc, #216]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e00b      	b.n	8005a34 <SEGGER_SYSVIEW_Start+0xa8>
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a38:	d8f0      	bhi.n	8005a1c <SEGGER_SYSVIEW_Start+0x90>
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	4b28      	ldr	r3, [pc, #160]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e00b      	b.n	8005a6e <SEGGER_SYSVIEW_Start+0xe2>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	1c59      	adds	r1, r3, #1
 8005a5e:	61f9      	str	r1, [r7, #28]
 8005a60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	09db      	lsrs	r3, r3, #7
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a72:	d8f0      	bhi.n	8005a56 <SEGGER_SYSVIEW_Start+0xca>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	61fa      	str	r2, [r7, #28]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e00b      	b.n	8005aa6 <SEGGER_SYSVIEW_Start+0x11a>
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	1c59      	adds	r1, r3, #1
 8005a96:	6179      	str	r1, [r7, #20]
 8005a98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	09db      	lsrs	r3, r3, #7
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aaa:	d8f0      	bhi.n	8005a8e <SEGGER_SYSVIEW_Start+0x102>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	617a      	str	r2, [r7, #20]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005abc:	2218      	movs	r2, #24
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fbff 	bl	80052c4 <_SendPacket>
      RECORD_END();
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005acc:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <SEGGER_SYSVIEW_Start+0x164>)
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ada:	f000 f9eb 	bl	8005eb4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005ade:	f000 f9b1 	bl	8005e44 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005ae2:	f000 fc8d 	bl	8006400 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005ae6:	bf00      	nop
 8005ae8:	3730      	adds	r7, #48	@ 0x30
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	2000636c 	.word	0x2000636c
 8005af4:	08006ba0 	.word	0x08006ba0
 8005af8:	2000639c 	.word	0x2000639c

08005afc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b02:	f3ef 8311 	mrs	r3, BASEPRI
 8005b06:	f04f 0120 	mov.w	r1, #32
 8005b0a:	f381 8811 	msr	BASEPRI, r1
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	480b      	ldr	r0, [pc, #44]	@ (8005b40 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b12:	f7ff faf4 	bl	80050fe <_PreparePacket>
 8005b16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b20:	220b      	movs	r2, #11
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6838      	ldr	r0, [r7, #0]
 8005b26:	f7ff fbcd 	bl	80052c4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f383 8811 	msr	BASEPRI, r3
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000639c 	.word	0x2000639c
 8005b44:	2000636c 	.word	0x2000636c

08005b48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	@ 0x30
 8005b4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b52:	f04f 0120 	mov.w	r1, #32
 8005b56:	f381 8811 	msr	BASEPRI, r1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	4845      	ldr	r0, [pc, #276]	@ (8005c74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b5e:	f7ff face 	bl	80050fe <_PreparePacket>
 8005b62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b6c:	4b42      	ldr	r3, [pc, #264]	@ (8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b72:	e00b      	b.n	8005b8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	09db      	lsrs	r3, r3, #7
 8005b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b90:	d8f0      	bhi.n	8005b74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	e00b      	b.n	8005bc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	1c59      	adds	r1, r3, #1
 8005bb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	09db      	lsrs	r3, r3, #7
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bca:	d8f0      	bhi.n	8005bae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	4b25      	ldr	r3, [pc, #148]	@ (8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	e00b      	b.n	8005c00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	1c59      	adds	r1, r3, #1
 8005bf0:	61f9      	str	r1, [r7, #28]
 8005bf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	09db      	lsrs	r3, r3, #7
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c04:	d8f0      	bhi.n	8005be8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	61fa      	str	r2, [r7, #28]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	e00b      	b.n	8005c38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1c59      	adds	r1, r3, #1
 8005c28:	6179      	str	r1, [r7, #20]
 8005c2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	09db      	lsrs	r3, r3, #7
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c3c:	d8f0      	bhi.n	8005c20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	617a      	str	r2, [r7, #20]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c4e:	2218      	movs	r2, #24
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f7ff fb36 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c66:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	4798      	blx	r3
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3730      	adds	r7, #48	@ 0x30
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	2000639c 	.word	0x2000639c
 8005c78:	2000636c 	.word	0x2000636c

08005c7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b092      	sub	sp, #72	@ 0x48
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c84:	f3ef 8311 	mrs	r3, BASEPRI
 8005c88:	f04f 0120 	mov.w	r1, #32
 8005c8c:	f381 8811 	msr	BASEPRI, r1
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	486a      	ldr	r0, [pc, #424]	@ (8005e3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c94:	f7ff fa33 	bl	80050fe <_PreparePacket>
 8005c98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b66      	ldr	r3, [pc, #408]	@ (8005e40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cae:	e00b      	b.n	8005cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb6:	1c59      	adds	r1, r3, #1
 8005cb8:	6479      	str	r1, [r7, #68]	@ 0x44
 8005cba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc4:	09db      	lsrs	r3, r3, #7
 8005cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ccc:	d8f0      	bhi.n	8005cb0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ce8:	e00b      	b.n	8005d02 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf0:	1c59      	adds	r1, r3, #1
 8005cf2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005cf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d06:	d8f0      	bhi.n	8005cea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff f9b3 	bl	800508c <_EncodeStr>
 8005d26:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d28:	2209      	movs	r2, #9
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	6938      	ldr	r0, [r7, #16]
 8005d2e:	f7ff fac9 	bl	80052c4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b40      	ldr	r3, [pc, #256]	@ (8005e40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d46:	e00b      	b.n	8005d60 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	6379      	str	r1, [r7, #52]	@ 0x34
 8005d52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	09db      	lsrs	r3, r3, #7
 8005d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d64:	d8f0      	bhi.n	8005d48 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d80:	e00b      	b.n	8005d9a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	09db      	lsrs	r3, r3, #7
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9e:	d8f0      	bhi.n	8005d82 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	e00b      	b.n	8005dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	09db      	lsrs	r3, r3, #7
 8005dd2:	623b      	str	r3, [r7, #32]
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd8:	d8f0      	bhi.n	8005dbc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	627a      	str	r2, [r7, #36]	@ 0x24
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e00b      	b.n	8005e0e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	61f9      	str	r1, [r7, #28]
 8005e00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e12:	d8f0      	bhi.n	8005df6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e24:	2215      	movs	r2, #21
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	6938      	ldr	r0, [r7, #16]
 8005e2a:	f7ff fa4b 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
 8005e36:	3748      	adds	r7, #72	@ 0x48
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2000639c 	.word	0x2000639c
 8005e40:	2000636c 	.word	0x2000636c

08005e44 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e48:	4b07      	ldr	r3, [pc, #28]	@ (8005e68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e5a:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4798      	blx	r3
  }
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000636c 	.word	0x2000636c

08005e6c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e74:	f3ef 8311 	mrs	r3, BASEPRI
 8005e78:	f04f 0120 	mov.w	r1, #32
 8005e7c:	f381 8811 	msr	BASEPRI, r1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	480b      	ldr	r0, [pc, #44]	@ (8005eb0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e84:	f7ff f93b 	bl	80050fe <_PreparePacket>
 8005e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e8a:	2280      	movs	r2, #128	@ 0x80
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6938      	ldr	r0, [r7, #16]
 8005e90:	f7ff f8fc 	bl	800508c <_EncodeStr>
 8005e94:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005e96:	220e      	movs	r2, #14
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f7ff fa12 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f383 8811 	msr	BASEPRI, r3
}
 8005ea6:	bf00      	nop
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2000639c 	.word	0x2000639c

08005eb4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005eba:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01a      	beq.n	8005ef8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ec2:	4b13      	ldr	r3, [pc, #76]	@ (8005f10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ecc:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4798      	blx	r3
 8005ed4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ed8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	000a      	movs	r2, r1
 8005ee8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005eea:	4613      	mov	r3, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4621      	mov	r1, r4
 8005ef0:	200d      	movs	r0, #13
 8005ef2:	f7ff fbe9 	bl	80056c8 <SEGGER_SYSVIEW_RecordU32x2>
 8005ef6:	e006      	b.n	8005f06 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ef8:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	200c      	movs	r0, #12
 8005f00:	f7ff fba6 	bl	8005650 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd90      	pop	{r4, r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000636c 	.word	0x2000636c
 8005f14:	e0001004 	.word	0xe0001004

08005f18 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f22:	f04f 0120 	mov.w	r1, #32
 8005f26:	f381 8811 	msr	BASEPRI, r1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	4819      	ldr	r0, [pc, #100]	@ (8005f94 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f2e:	f7ff f8e6 	bl	80050fe <_PreparePacket>
 8005f32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f38:	4b17      	ldr	r3, [pc, #92]	@ (8005f98 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f40:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	e00b      	b.n	8005f64 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	6179      	str	r1, [r7, #20]
 8005f56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	09db      	lsrs	r3, r3, #7
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f68:	d8f0      	bhi.n	8005f4c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	617a      	str	r2, [r7, #20]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	68b8      	ldr	r0, [r7, #8]
 8005f80:	f7ff f9a0 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f383 8811 	msr	BASEPRI, r3
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000639c 	.word	0x2000639c
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa6:	f04f 0120 	mov.w	r1, #32
 8005faa:	f381 8811 	msr	BASEPRI, r1
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	4807      	ldr	r0, [pc, #28]	@ (8005fd0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005fb2:	f7ff f8a4 	bl	80050fe <_PreparePacket>
 8005fb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005fb8:	2203      	movs	r2, #3
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6838      	ldr	r0, [r7, #0]
 8005fbe:	f7ff f981 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f383 8811 	msr	BASEPRI, r3
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2000639c 	.word	0x2000639c

08005fd4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fda:	f3ef 8311 	mrs	r3, BASEPRI
 8005fde:	f04f 0120 	mov.w	r1, #32
 8005fe2:	f381 8811 	msr	BASEPRI, r1
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	4807      	ldr	r0, [pc, #28]	@ (8006008 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005fea:	f7ff f888 	bl	80050fe <_PreparePacket>
 8005fee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ff0:	2212      	movs	r2, #18
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6838      	ldr	r0, [r7, #0]
 8005ff6:	f7ff f965 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f383 8811 	msr	BASEPRI, r3
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	2000639c 	.word	0x2000639c

0800600c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006012:	f3ef 8311 	mrs	r3, BASEPRI
 8006016:	f04f 0120 	mov.w	r1, #32
 800601a:	f381 8811 	msr	BASEPRI, r1
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	4807      	ldr	r0, [pc, #28]	@ (8006040 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006022:	f7ff f86c 	bl	80050fe <_PreparePacket>
 8006026:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006028:	2211      	movs	r2, #17
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6838      	ldr	r0, [r7, #0]
 800602e:	f7ff f949 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f383 8811 	msr	BASEPRI, r3
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	2000639c 	.word	0x2000639c

08006044 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800604c:	f3ef 8311 	mrs	r3, BASEPRI
 8006050:	f04f 0120 	mov.w	r1, #32
 8006054:	f381 8811 	msr	BASEPRI, r1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	4819      	ldr	r0, [pc, #100]	@ (80060c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800605c:	f7ff f84f 	bl	80050fe <_PreparePacket>
 8006060:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006066:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	61f9      	str	r1, [r7, #28]
 8006084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b7f      	cmp	r3, #127	@ 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	61fa      	str	r2, [r7, #28]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060a8:	2208      	movs	r2, #8
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6938      	ldr	r0, [r7, #16]
 80060ae:	f7ff f909 	bl	80052c4 <_SendPacket>
  RECORD_END();
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f383 8811 	msr	BASEPRI, r3
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2000639c 	.word	0x2000639c
 80060c4:	2000636c 	.word	0x2000636c

080060c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	4819      	ldr	r0, [pc, #100]	@ (8006144 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060e0:	f7ff f80d 	bl	80050fe <_PreparePacket>
 80060e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ea:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	61f9      	str	r1, [r7, #28]
 8006108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b7f      	cmp	r3, #127	@ 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800612c:	2204      	movs	r2, #4
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	6938      	ldr	r0, [r7, #16]
 8006132:	f7ff f8c7 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f383 8811 	msr	BASEPRI, r3
}
 800613c:	bf00      	nop
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	2000639c 	.word	0x2000639c
 8006148:	2000636c 	.word	0x2000636c

0800614c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006154:	f3ef 8311 	mrs	r3, BASEPRI
 8006158:	f04f 0120 	mov.w	r1, #32
 800615c:	f381 8811 	msr	BASEPRI, r1
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	4819      	ldr	r0, [pc, #100]	@ (80061c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006164:	f7fe ffcb 	bl	80050fe <_PreparePacket>
 8006168:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800616e:	4b17      	ldr	r3, [pc, #92]	@ (80061cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e00b      	b.n	800619a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	61f9      	str	r1, [r7, #28]
 800618c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b7f      	cmp	r3, #127	@ 0x7f
 800619e:	d8f0      	bhi.n	8006182 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	61fa      	str	r2, [r7, #28]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80061b0:	2206      	movs	r2, #6
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6938      	ldr	r0, [r7, #16]
 80061b6:	f7ff f885 	bl	80052c4 <_SendPacket>
  RECORD_END();
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f383 8811 	msr	BASEPRI, r3
}
 80061c0:	bf00      	nop
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	2000639c 	.word	0x2000639c
 80061cc:	2000636c 	.word	0x2000636c

080061d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	@ 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061da:	f3ef 8311 	mrs	r3, BASEPRI
 80061de:	f04f 0120 	mov.w	r1, #32
 80061e2:	f381 8811 	msr	BASEPRI, r1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	4827      	ldr	r0, [pc, #156]	@ (8006288 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80061ea:	f7fe ff88 	bl	80050fe <_PreparePacket>
 80061ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061f4:	4b25      	ldr	r3, [pc, #148]	@ (800628c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e00b      	b.n	8006220 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	6279      	str	r1, [r7, #36]	@ 0x24
 8006212:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	09db      	lsrs	r3, r3, #7
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b7f      	cmp	r3, #127	@ 0x7f
 8006224:	d8f0      	bhi.n	8006208 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	627a      	str	r2, [r7, #36]	@ 0x24
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	61f9      	str	r1, [r7, #28]
 800624a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b7f      	cmp	r3, #127	@ 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	61fa      	str	r2, [r7, #28]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800626e:	2207      	movs	r2, #7
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f7ff f826 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
 8006280:	3728      	adds	r7, #40	@ 0x28
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000639c 	.word	0x2000639c
 800628c:	2000636c 	.word	0x2000636c

08006290 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006298:	4b04      	ldr	r3, [pc, #16]	@ (80062ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	1ad3      	subs	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	2000636c 	.word	0x2000636c

080062b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	@ 0x30
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062ba:	4b40      	ldr	r3, [pc, #256]	@ (80063bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d077      	beq.n	80063b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80062c2:	4b3e      	ldr	r3, [pc, #248]	@ (80063bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80062c8:	2300      	movs	r3, #0
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062cc:	e008      	b.n	80062e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80062ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	3301      	adds	r3, #1
 80062de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3f2      	bcc.n	80062ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80062e8:	e000      	b.n	80062ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80062ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d055      	beq.n	800639e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062f2:	f3ef 8311 	mrs	r3, BASEPRI
 80062f6:	f04f 0120 	mov.w	r1, #32
 80062fa:	f381 8811 	msr	BASEPRI, r1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	482f      	ldr	r0, [pc, #188]	@ (80063c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006302:	f7fe fefc 	bl	80050fe <_PreparePacket>
 8006306:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	623b      	str	r3, [r7, #32]
 8006314:	e00b      	b.n	800632e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006320:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	09db      	lsrs	r3, r3, #7
 800632c:	623b      	str	r3, [r7, #32]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	2b7f      	cmp	r3, #127	@ 0x7f
 8006332:	d8f0      	bhi.n	8006316 <SEGGER_SYSVIEW_SendModule+0x66>
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	627a      	str	r2, [r7, #36]	@ 0x24
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00b      	b.n	8006368 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	61f9      	str	r1, [r7, #28]
 800635a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	09db      	lsrs	r3, r3, #7
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b7f      	cmp	r3, #127	@ 0x7f
 800636c:	d8f0      	bhi.n	8006350 <SEGGER_SYSVIEW_SendModule+0xa0>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2280      	movs	r2, #128	@ 0x80
 8006384:	4619      	mov	r1, r3
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7fe fe80 	bl	800508c <_EncodeStr>
 800638c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800638e:	2216      	movs	r2, #22
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	6938      	ldr	r0, [r7, #16]
 8006394:	f7fe ff96 	bl	80052c4 <_SendPacket>
      RECORD_END();
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4798      	blx	r3
    }
  }
}
 80063b2:	bf00      	nop
 80063b4:	3730      	adds	r7, #48	@ 0x30
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20006394 	.word	0x20006394
 80063c0:	2000639c 	.word	0x2000639c

080063c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80063ca:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063d2:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f2      	bne.n	80063d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20006394 	.word	0x20006394

08006400 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006406:	f3ef 8311 	mrs	r3, BASEPRI
 800640a:	f04f 0120 	mov.w	r1, #32
 800640e:	f381 8811 	msr	BASEPRI, r1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	4817      	ldr	r0, [pc, #92]	@ (8006474 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006416:	f7fe fe72 	bl	80050fe <_PreparePacket>
 800641a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e00b      	b.n	8006444 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	6179      	str	r1, [r7, #20]
 8006436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b7f      	cmp	r3, #127	@ 0x7f
 8006448:	d8f0      	bhi.n	800642c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	617a      	str	r2, [r7, #20]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800645a:	221b      	movs	r2, #27
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	68b8      	ldr	r0, [r7, #8]
 8006460:	f7fe ff30 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f383 8811 	msr	BASEPRI, r3
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	2000639c 	.word	0x2000639c
 8006478:	20006398 	.word	0x20006398

0800647c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006484:	f3ef 8311 	mrs	r3, BASEPRI
 8006488:	f04f 0120 	mov.w	r1, #32
 800648c:	f381 8811 	msr	BASEPRI, r1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	4827      	ldr	r0, [pc, #156]	@ (8006530 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006494:	f7fe fe33 	bl	80050fe <_PreparePacket>
 8006498:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800649a:	2280      	movs	r2, #128	@ 0x80
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7fe fdf4 	bl	800508c <_EncodeStr>
 80064a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064aa:	2301      	movs	r3, #1
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	e00b      	b.n	80064c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80064ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	09db      	lsrs	r3, r3, #7
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80064cc:	d8f0      	bhi.n	80064b0 <SEGGER_SYSVIEW_Warn+0x34>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e00b      	b.n	8006500 <SEGGER_SYSVIEW_Warn+0x84>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	61f9      	str	r1, [r7, #28]
 80064f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b7f      	cmp	r3, #127	@ 0x7f
 8006504:	d8f0      	bhi.n	80064e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	61fa      	str	r2, [r7, #28]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006516:	221a      	movs	r2, #26
 8006518:	68f9      	ldr	r1, [r7, #12]
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f7fe fed2 	bl	80052c4 <_SendPacket>
  RECORD_END();
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f383 8811 	msr	BASEPRI, r3
}
 8006526:	bf00      	nop
 8006528:	3728      	adds	r7, #40	@ 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000639c 	.word	0x2000639c

08006534 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006536:	b085      	sub	sp, #20
 8006538:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	e033      	b.n	80065a8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006540:	491e      	ldr	r1, [pc, #120]	@ (80065bc <_cbSendTaskList+0x88>)
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	491a      	ldr	r1, [pc, #104]	@ (80065bc <_cbSendTaskList+0x88>)
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	3304      	adds	r3, #4
 8006560:	6819      	ldr	r1, [r3, #0]
 8006562:	4c16      	ldr	r4, [pc, #88]	@ (80065bc <_cbSendTaskList+0x88>)
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4423      	add	r3, r4
 8006570:	3308      	adds	r3, #8
 8006572:	681c      	ldr	r4, [r3, #0]
 8006574:	4d11      	ldr	r5, [pc, #68]	@ (80065bc <_cbSendTaskList+0x88>)
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	442b      	add	r3, r5
 8006582:	330c      	adds	r3, #12
 8006584:	681d      	ldr	r5, [r3, #0]
 8006586:	4e0d      	ldr	r6, [pc, #52]	@ (80065bc <_cbSendTaskList+0x88>)
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4433      	add	r3, r6
 8006594:	3310      	adds	r3, #16
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	462b      	mov	r3, r5
 800659c:	4622      	mov	r2, r4
 800659e:	f000 f8bd 	bl	800671c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3301      	adds	r3, #1
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <_cbSendTaskList+0x8c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d3c6      	bcc.n	8006540 <_cbSendTaskList+0xc>
  }
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	20006480 	.word	0x20006480
 80065c0:	20006520 	.word	0x20006520

080065c4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80065c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80065cc:	f7fc faa8 	bl	8002b20 <xTaskGetTickCountFromISR>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2200      	movs	r2, #0
 80065d4:	469a      	mov	sl, r3
 80065d6:	4693      	mov	fp, r2
 80065d8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80065dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	f04f 0a00 	mov.w	sl, #0
 80065e8:	f04f 0b00 	mov.w	fp, #0
 80065ec:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80065f0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80065f4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80065f8:	4652      	mov	r2, sl
 80065fa:	465b      	mov	r3, fp
 80065fc:	1a14      	subs	r4, r2, r0
 80065fe:	eb63 0501 	sbc.w	r5, r3, r1
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	00ab      	lsls	r3, r5, #2
 800660c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006610:	00a2      	lsls	r2, r4, #2
 8006612:	4614      	mov	r4, r2
 8006614:	461d      	mov	r5, r3
 8006616:	eb14 0800 	adds.w	r8, r4, r0
 800661a:	eb45 0901 	adc.w	r9, r5, r1
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800662a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800662e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006632:	4690      	mov	r8, r2
 8006634:	4699      	mov	r9, r3
 8006636:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800663a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800664c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800665a:	2205      	movs	r2, #5
 800665c:	492b      	ldr	r1, [pc, #172]	@ (800670c <SYSVIEW_AddTask+0xc0>)
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	f000 f87d 	bl	800675e <memcmp>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d04b      	beq.n	8006702 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800666a:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b07      	cmp	r3, #7
 8006670:	d903      	bls.n	800667a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006672:	4828      	ldr	r0, [pc, #160]	@ (8006714 <SYSVIEW_AddTask+0xc8>)
 8006674:	f7ff ff02 	bl	800647c <SEGGER_SYSVIEW_Warn>
    return;
 8006678:	e044      	b.n	8006704 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800667a:	4b25      	ldr	r3, [pc, #148]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4926      	ldr	r1, [pc, #152]	@ (8006718 <SYSVIEW_AddTask+0xcc>)
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800668e:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4921      	ldr	r1, [pc, #132]	@ (8006718 <SYSVIEW_AddTask+0xcc>)
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	3304      	adds	r3, #4
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80066a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	491b      	ldr	r1, [pc, #108]	@ (8006718 <SYSVIEW_AddTask+0xcc>)
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3308      	adds	r3, #8
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80066ba:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4916      	ldr	r1, [pc, #88]	@ (8006718 <SYSVIEW_AddTask+0xcc>)
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	330c      	adds	r3, #12
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80066d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4910      	ldr	r1, [pc, #64]	@ (8006718 <SYSVIEW_AddTask+0xcc>)
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	3310      	adds	r3, #16
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <SYSVIEW_AddTask+0xc4>)
 80066ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f80e 	bl	800671c <SYSVIEW_SendTaskInfo>
 8006700:	e000      	b.n	8006704 <SYSVIEW_AddTask+0xb8>
    return;
 8006702:	bf00      	nop

}
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	08006b1c 	.word	0x08006b1c
 8006710:	20006520 	.word	0x20006520
 8006714:	08006b24 	.word	0x08006b24
 8006718:	20006480 	.word	0x20006480

0800671c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	@ 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	2218      	movs	r2, #24
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f823 	bl	800677e <memset>
  TaskInfo.TaskID     = TaskID;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800674c:	f107 0310 	add.w	r3, r7, #16
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fa93 	bl	8005c7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006756:	bf00      	nop
 8006758:	3728      	adds	r7, #40	@ 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <memcmp>:
 800675e:	b510      	push	{r4, lr}
 8006760:	3901      	subs	r1, #1
 8006762:	4402      	add	r2, r0
 8006764:	4290      	cmp	r0, r2
 8006766:	d101      	bne.n	800676c <memcmp+0xe>
 8006768:	2000      	movs	r0, #0
 800676a:	e005      	b.n	8006778 <memcmp+0x1a>
 800676c:	7803      	ldrb	r3, [r0, #0]
 800676e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006772:	42a3      	cmp	r3, r4
 8006774:	d001      	beq.n	800677a <memcmp+0x1c>
 8006776:	1b18      	subs	r0, r3, r4
 8006778:	bd10      	pop	{r4, pc}
 800677a:	3001      	adds	r0, #1
 800677c:	e7f2      	b.n	8006764 <memcmp+0x6>

0800677e <memset>:
 800677e:	4402      	add	r2, r0
 8006780:	4603      	mov	r3, r0
 8006782:	4293      	cmp	r3, r2
 8006784:	d100      	bne.n	8006788 <memset+0xa>
 8006786:	4770      	bx	lr
 8006788:	f803 1b01 	strb.w	r1, [r3], #1
 800678c:	e7f9      	b.n	8006782 <memset+0x4>
	...

08006790 <__libc_init_array>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4d0d      	ldr	r5, [pc, #52]	@ (80067c8 <__libc_init_array+0x38>)
 8006794:	4c0d      	ldr	r4, [pc, #52]	@ (80067cc <__libc_init_array+0x3c>)
 8006796:	1b64      	subs	r4, r4, r5
 8006798:	10a4      	asrs	r4, r4, #2
 800679a:	2600      	movs	r6, #0
 800679c:	42a6      	cmp	r6, r4
 800679e:	d109      	bne.n	80067b4 <__libc_init_array+0x24>
 80067a0:	4d0b      	ldr	r5, [pc, #44]	@ (80067d0 <__libc_init_array+0x40>)
 80067a2:	4c0c      	ldr	r4, [pc, #48]	@ (80067d4 <__libc_init_array+0x44>)
 80067a4:	f000 f8dc 	bl	8006960 <_init>
 80067a8:	1b64      	subs	r4, r4, r5
 80067aa:	10a4      	asrs	r4, r4, #2
 80067ac:	2600      	movs	r6, #0
 80067ae:	42a6      	cmp	r6, r4
 80067b0:	d105      	bne.n	80067be <__libc_init_array+0x2e>
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b8:	4798      	blx	r3
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7ee      	b.n	800679c <__libc_init_array+0xc>
 80067be:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c2:	4798      	blx	r3
 80067c4:	3601      	adds	r6, #1
 80067c6:	e7f2      	b.n	80067ae <__libc_init_array+0x1e>
 80067c8:	08006bb4 	.word	0x08006bb4
 80067cc:	08006bb4 	.word	0x08006bb4
 80067d0:	08006bb4 	.word	0x08006bb4
 80067d4:	08006bb8 	.word	0x08006bb8

080067d8 <__retarget_lock_acquire_recursive>:
 80067d8:	4770      	bx	lr

080067da <__retarget_lock_release_recursive>:
 80067da:	4770      	bx	lr

080067dc <_reclaim_reent>:
 80067dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006894 <_reclaim_reent+0xb8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4283      	cmp	r3, r0
 80067e2:	b570      	push	{r4, r5, r6, lr}
 80067e4:	4604      	mov	r4, r0
 80067e6:	d053      	beq.n	8006890 <_reclaim_reent+0xb4>
 80067e8:	69c3      	ldr	r3, [r0, #28]
 80067ea:	b31b      	cbz	r3, 8006834 <_reclaim_reent+0x58>
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	b163      	cbz	r3, 800680a <_reclaim_reent+0x2e>
 80067f0:	2500      	movs	r5, #0
 80067f2:	69e3      	ldr	r3, [r4, #28]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	5959      	ldr	r1, [r3, r5]
 80067f8:	b9b1      	cbnz	r1, 8006828 <_reclaim_reent+0x4c>
 80067fa:	3504      	adds	r5, #4
 80067fc:	2d80      	cmp	r5, #128	@ 0x80
 80067fe:	d1f8      	bne.n	80067f2 <_reclaim_reent+0x16>
 8006800:	69e3      	ldr	r3, [r4, #28]
 8006802:	4620      	mov	r0, r4
 8006804:	68d9      	ldr	r1, [r3, #12]
 8006806:	f000 f855 	bl	80068b4 <_free_r>
 800680a:	69e3      	ldr	r3, [r4, #28]
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	b111      	cbz	r1, 8006816 <_reclaim_reent+0x3a>
 8006810:	4620      	mov	r0, r4
 8006812:	f000 f84f 	bl	80068b4 <_free_r>
 8006816:	69e3      	ldr	r3, [r4, #28]
 8006818:	689d      	ldr	r5, [r3, #8]
 800681a:	b15d      	cbz	r5, 8006834 <_reclaim_reent+0x58>
 800681c:	4629      	mov	r1, r5
 800681e:	4620      	mov	r0, r4
 8006820:	682d      	ldr	r5, [r5, #0]
 8006822:	f000 f847 	bl	80068b4 <_free_r>
 8006826:	e7f8      	b.n	800681a <_reclaim_reent+0x3e>
 8006828:	680e      	ldr	r6, [r1, #0]
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f842 	bl	80068b4 <_free_r>
 8006830:	4631      	mov	r1, r6
 8006832:	e7e1      	b.n	80067f8 <_reclaim_reent+0x1c>
 8006834:	6961      	ldr	r1, [r4, #20]
 8006836:	b111      	cbz	r1, 800683e <_reclaim_reent+0x62>
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f83b 	bl	80068b4 <_free_r>
 800683e:	69e1      	ldr	r1, [r4, #28]
 8006840:	b111      	cbz	r1, 8006848 <_reclaim_reent+0x6c>
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f836 	bl	80068b4 <_free_r>
 8006848:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800684a:	b111      	cbz	r1, 8006852 <_reclaim_reent+0x76>
 800684c:	4620      	mov	r0, r4
 800684e:	f000 f831 	bl	80068b4 <_free_r>
 8006852:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006854:	b111      	cbz	r1, 800685c <_reclaim_reent+0x80>
 8006856:	4620      	mov	r0, r4
 8006858:	f000 f82c 	bl	80068b4 <_free_r>
 800685c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800685e:	b111      	cbz	r1, 8006866 <_reclaim_reent+0x8a>
 8006860:	4620      	mov	r0, r4
 8006862:	f000 f827 	bl	80068b4 <_free_r>
 8006866:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006868:	b111      	cbz	r1, 8006870 <_reclaim_reent+0x94>
 800686a:	4620      	mov	r0, r4
 800686c:	f000 f822 	bl	80068b4 <_free_r>
 8006870:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006872:	b111      	cbz	r1, 800687a <_reclaim_reent+0x9e>
 8006874:	4620      	mov	r0, r4
 8006876:	f000 f81d 	bl	80068b4 <_free_r>
 800687a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800687c:	b111      	cbz	r1, 8006884 <_reclaim_reent+0xa8>
 800687e:	4620      	mov	r0, r4
 8006880:	f000 f818 	bl	80068b4 <_free_r>
 8006884:	6a23      	ldr	r3, [r4, #32]
 8006886:	b11b      	cbz	r3, 8006890 <_reclaim_reent+0xb4>
 8006888:	4620      	mov	r0, r4
 800688a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800688e:	4718      	bx	r3
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010

08006898 <memcpy>:
 8006898:	440a      	add	r2, r1
 800689a:	4291      	cmp	r1, r2
 800689c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068a0:	d100      	bne.n	80068a4 <memcpy+0xc>
 80068a2:	4770      	bx	lr
 80068a4:	b510      	push	{r4, lr}
 80068a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ae:	4291      	cmp	r1, r2
 80068b0:	d1f9      	bne.n	80068a6 <memcpy+0xe>
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <_free_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4605      	mov	r5, r0
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d041      	beq.n	8006940 <_free_r+0x8c>
 80068bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c0:	1f0c      	subs	r4, r1, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	18e4      	addlt	r4, r4, r3
 80068c8:	f000 f83e 	bl	8006948 <__malloc_lock>
 80068cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <_free_r+0x90>)
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	b933      	cbnz	r3, 80068e0 <_free_r+0x2c>
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	6014      	str	r4, [r2, #0]
 80068d6:	4628      	mov	r0, r5
 80068d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068dc:	f000 b83a 	b.w	8006954 <__malloc_unlock>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d908      	bls.n	80068f6 <_free_r+0x42>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	1821      	adds	r1, r4, r0
 80068e8:	428b      	cmp	r3, r1
 80068ea:	bf01      	itttt	eq
 80068ec:	6819      	ldreq	r1, [r3, #0]
 80068ee:	685b      	ldreq	r3, [r3, #4]
 80068f0:	1809      	addeq	r1, r1, r0
 80068f2:	6021      	streq	r1, [r4, #0]
 80068f4:	e7ed      	b.n	80068d2 <_free_r+0x1e>
 80068f6:	461a      	mov	r2, r3
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	b10b      	cbz	r3, 8006900 <_free_r+0x4c>
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	d9fa      	bls.n	80068f6 <_free_r+0x42>
 8006900:	6811      	ldr	r1, [r2, #0]
 8006902:	1850      	adds	r0, r2, r1
 8006904:	42a0      	cmp	r0, r4
 8006906:	d10b      	bne.n	8006920 <_free_r+0x6c>
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	4401      	add	r1, r0
 800690c:	1850      	adds	r0, r2, r1
 800690e:	4283      	cmp	r3, r0
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	d1e0      	bne.n	80068d6 <_free_r+0x22>
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	6053      	str	r3, [r2, #4]
 800691a:	4408      	add	r0, r1
 800691c:	6010      	str	r0, [r2, #0]
 800691e:	e7da      	b.n	80068d6 <_free_r+0x22>
 8006920:	d902      	bls.n	8006928 <_free_r+0x74>
 8006922:	230c      	movs	r3, #12
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	e7d6      	b.n	80068d6 <_free_r+0x22>
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	1821      	adds	r1, r4, r0
 800692c:	428b      	cmp	r3, r1
 800692e:	bf04      	itt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	bf04      	itt	eq
 8006938:	1809      	addeq	r1, r1, r0
 800693a:	6021      	streq	r1, [r4, #0]
 800693c:	6054      	str	r4, [r2, #4]
 800693e:	e7ca      	b.n	80068d6 <_free_r+0x22>
 8006940:	bd38      	pop	{r3, r4, r5, pc}
 8006942:	bf00      	nop
 8006944:	20006660 	.word	0x20006660

08006948 <__malloc_lock>:
 8006948:	4801      	ldr	r0, [pc, #4]	@ (8006950 <__malloc_lock+0x8>)
 800694a:	f7ff bf45 	b.w	80067d8 <__retarget_lock_acquire_recursive>
 800694e:	bf00      	nop
 8006950:	2000665c 	.word	0x2000665c

08006954 <__malloc_unlock>:
 8006954:	4801      	ldr	r0, [pc, #4]	@ (800695c <__malloc_unlock+0x8>)
 8006956:	f7ff bf40 	b.w	80067da <__retarget_lock_release_recursive>
 800695a:	bf00      	nop
 800695c:	2000665c 	.word	0x2000665c

08006960 <_init>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	bf00      	nop
 8006964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006966:	bc08      	pop	{r3}
 8006968:	469e      	mov	lr, r3
 800696a:	4770      	bx	lr

0800696c <_fini>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr
